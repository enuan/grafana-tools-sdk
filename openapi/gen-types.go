// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"time"
)

const (
	Api_keyScopes = "api_key.Scopes"
	BasicScopes   = "basic.Scopes"
)

// Defines values for AddAPIKeyCommandRole.
const (
	AddAPIKeyCommandRoleAdmin  AddAPIKeyCommandRole = "Admin"
	AddAPIKeyCommandRoleEditor AddAPIKeyCommandRole = "Editor"
	AddAPIKeyCommandRoleNone   AddAPIKeyCommandRole = "None"
	AddAPIKeyCommandRoleViewer AddAPIKeyCommandRole = "Viewer"
)

// Defines values for AddInviteFormRole.
const (
	AddInviteFormRoleAdmin  AddInviteFormRole = "Admin"
	AddInviteFormRoleEditor AddInviteFormRole = "Editor"
	AddInviteFormRoleNone   AddInviteFormRole = "None"
	AddInviteFormRoleViewer AddInviteFormRole = "Viewer"
)

// Defines values for AddOrgUserCommandRole.
const (
	AddOrgUserCommandRoleAdmin  AddOrgUserCommandRole = "Admin"
	AddOrgUserCommandRoleEditor AddOrgUserCommandRole = "Editor"
	AddOrgUserCommandRoleNone   AddOrgUserCommandRole = "None"
	AddOrgUserCommandRoleViewer AddOrgUserCommandRole = "Viewer"
)

// Defines values for AlertRuleExportExecErrState.
const (
	AlertRuleExportExecErrStateAlerting AlertRuleExportExecErrState = "Alerting"
	AlertRuleExportExecErrStateError    AlertRuleExportExecErrState = "Error"
	AlertRuleExportExecErrStateOK       AlertRuleExportExecErrState = "OK"
)

// Defines values for AlertRuleExportNoDataState.
const (
	AlertRuleExportNoDataStateAlerting AlertRuleExportNoDataState = "Alerting"
	AlertRuleExportNoDataStateNoData   AlertRuleExportNoDataState = "NoData"
	AlertRuleExportNoDataStateOK       AlertRuleExportNoDataState = "OK"
)

// Defines values for ApiKeyDTORole.
const (
	ApiKeyDTORoleAdmin  ApiKeyDTORole = "Admin"
	ApiKeyDTORoleEditor ApiKeyDTORole = "Editor"
	ApiKeyDTORoleNone   ApiKeyDTORole = "None"
	ApiKeyDTORoleViewer ApiKeyDTORole = "Viewer"
)

// Defines values for CreateLibraryElementCommandKind.
const (
	CreateLibraryElementCommandKindN1 CreateLibraryElementCommandKind = 1
	CreateLibraryElementCommandKindN2 CreateLibraryElementCommandKind = 2
)

// Defines values for CreateServiceAccountFormRole.
const (
	CreateServiceAccountFormRoleAdmin  CreateServiceAccountFormRole = "Admin"
	CreateServiceAccountFormRoleEditor CreateServiceAccountFormRole = "Editor"
	CreateServiceAccountFormRoleNone   CreateServiceAccountFormRole = "None"
	CreateServiceAccountFormRoleViewer CreateServiceAccountFormRole = "Viewer"
)

// Defines values for DashboardACLInfoDTORole.
const (
	DashboardACLInfoDTORoleAdmin  DashboardACLInfoDTORole = "Admin"
	DashboardACLInfoDTORoleEditor DashboardACLInfoDTORole = "Editor"
	DashboardACLInfoDTORoleNone   DashboardACLInfoDTORole = "None"
	DashboardACLInfoDTORoleViewer DashboardACLInfoDTORole = "Viewer"
)

// Defines values for DashboardACLUpdateItemRole.
const (
	DashboardACLUpdateItemRoleAdmin  DashboardACLUpdateItemRole = "Admin"
	DashboardACLUpdateItemRoleEditor DashboardACLUpdateItemRole = "Editor"
	DashboardACLUpdateItemRoleNone   DashboardACLUpdateItemRole = "None"
	DashboardACLUpdateItemRoleViewer DashboardACLUpdateItemRole = "Viewer"
)

// Defines values for EmbeddedContactPointType.
const (
	Alertmanager EmbeddedContactPointType = "alertmanager"
	Dingding     EmbeddedContactPointType = " dingding"
	Discord      EmbeddedContactPointType = " discord"
	Email        EmbeddedContactPointType = " email"
	Googlechat   EmbeddedContactPointType = " googlechat"
	Kafka        EmbeddedContactPointType = " kafka"
	Line         EmbeddedContactPointType = " line"
	Opsgenie     EmbeddedContactPointType = " opsgenie"
	Pagerduty    EmbeddedContactPointType = " pagerduty"
	Pushover     EmbeddedContactPointType = " pushover"
	Sensugo      EmbeddedContactPointType = " sensugo"
	Slack        EmbeddedContactPointType = " slack"
	Teams        EmbeddedContactPointType = " teams"
	Telegram     EmbeddedContactPointType = " telegram"
	Threema      EmbeddedContactPointType = " threema"
	Victorops    EmbeddedContactPointType = " victorops"
	Webhook      EmbeddedContactPointType = " webhook"
	Wecom        EmbeddedContactPointType = " wecom"
)

// Defines values for PatchLibraryElementCommandKind.
const (
	PatchLibraryElementCommandKindN1 PatchLibraryElementCommandKind = 1
	PatchLibraryElementCommandKindN2 PatchLibraryElementCommandKind = 2
)

// Defines values for PatchPrefsCmdTheme.
const (
	PatchPrefsCmdThemeDark  PatchPrefsCmdTheme = "dark"
	PatchPrefsCmdThemeLight PatchPrefsCmdTheme = "light"
)

// Defines values for PatchPrefsCmdTimezone.
const (
	PatchPrefsCmdTimezoneBrowser PatchPrefsCmdTimezone = "browser"
	PatchPrefsCmdTimezoneUtc     PatchPrefsCmdTimezone = "utc"
)

// Defines values for ProvisionedAlertRuleExecErrState.
const (
	ProvisionedAlertRuleExecErrStateAlerting ProvisionedAlertRuleExecErrState = "Alerting"
	ProvisionedAlertRuleExecErrStateError    ProvisionedAlertRuleExecErrState = "Error"
	ProvisionedAlertRuleExecErrStateOK       ProvisionedAlertRuleExecErrState = "OK"
)

// Defines values for ProvisionedAlertRuleNoDataState.
const (
	ProvisionedAlertRuleNoDataStateAlerting ProvisionedAlertRuleNoDataState = "Alerting"
	ProvisionedAlertRuleNoDataStateNoData   ProvisionedAlertRuleNoDataState = "NoData"
	ProvisionedAlertRuleNoDataStateOK       ProvisionedAlertRuleNoDataState = "OK"
)

// Defines values for TempUserDTORole.
const (
	TempUserDTORoleAdmin  TempUserDTORole = "Admin"
	TempUserDTORoleEditor TempUserDTORole = "Editor"
	TempUserDTORoleNone   TempUserDTORole = "None"
	TempUserDTORoleViewer TempUserDTORole = "Viewer"
)

// Defines values for TransformationType.
const (
	Logfmt TransformationType = "logfmt"
	Regex  TransformationType = "regex"
)

// Defines values for UpdateOrgUserCommandRole.
const (
	UpdateOrgUserCommandRoleAdmin  UpdateOrgUserCommandRole = "Admin"
	UpdateOrgUserCommandRoleEditor UpdateOrgUserCommandRole = "Editor"
	UpdateOrgUserCommandRoleNone   UpdateOrgUserCommandRole = "None"
	UpdateOrgUserCommandRoleViewer UpdateOrgUserCommandRole = "Viewer"
)

// Defines values for UpdatePrefsCmdTheme.
const (
	UpdatePrefsCmdThemeDark   UpdatePrefsCmdTheme = "dark"
	UpdatePrefsCmdThemeLight  UpdatePrefsCmdTheme = "light"
	UpdatePrefsCmdThemeSystem UpdatePrefsCmdTheme = "system"
)

// Defines values for UpdatePrefsCmdTimezone.
const (
	UpdatePrefsCmdTimezoneBrowser UpdatePrefsCmdTimezone = "browser"
	UpdatePrefsCmdTimezoneUtc     UpdatePrefsCmdTimezone = "utc"
)

// Defines values for UpdateServiceAccountFormRole.
const (
	UpdateServiceAccountFormRoleAdmin  UpdateServiceAccountFormRole = "Admin"
	UpdateServiceAccountFormRoleEditor UpdateServiceAccountFormRole = "Editor"
	UpdateServiceAccountFormRoleNone   UpdateServiceAccountFormRole = "None"
	UpdateServiceAccountFormRoleViewer UpdateServiceAccountFormRole = "Viewer"
)

// Defines values for UserOrgDTORole.
const (
	Admin  UserOrgDTORole = "Admin"
	Editor UserOrgDTORole = "Editor"
	None   UserOrgDTORole = "None"
	Viewer UserOrgDTORole = "Viewer"
)

// Defines values for GetAlertsParamsState.
const (
	Alerting GetAlertsParamsState = "alerting"
	All      GetAlertsParamsState = "all"
	NoData   GetAlertsParamsState = "no_data"
	Ok       GetAlertsParamsState = "ok"
	Paused   GetAlertsParamsState = "paused"
	Pending  GetAlertsParamsState = "pending"
	Unknown  GetAlertsParamsState = "unknown"
)

// Defines values for GetAnnotationsParamsType.
const (
	GetAnnotationsParamsTypeAlert      GetAnnotationsParamsType = "alert"
	GetAnnotationsParamsTypeAnnotation GetAnnotationsParamsType = "annotation"
)

// Defines values for CalculateDashboardDiffJSONBodyDiffType.
const (
	CalculateDashboardDiffJSONBodyDiffTypeBasic CalculateDashboardDiffJSONBodyDiffType = "basic"
	CalculateDashboardDiffJSONBodyDiffTypeJson  CalculateDashboardDiffJSONBodyDiffType = "json"
)

// Defines values for GetLibraryElementsParamsKind.
const (
	N1 GetLibraryElementsParamsKind = 1
	N2 GetLibraryElementsParamsKind = 2
)

// Defines values for GetLibraryElementsParamsSortDirection.
const (
	GetLibraryElementsParamsSortDirectionAlphaAsc  GetLibraryElementsParamsSortDirection = "alpha-asc"
	GetLibraryElementsParamsSortDirectionAlphaDesc GetLibraryElementsParamsSortDirection = "alpha-desc"
)

// Defines values for SearchQueriesParamsSort.
const (
	TimeAsc  SearchQueriesParamsSort = "time-asc"
	TimeDesc SearchQueriesParamsSort = "time-desc"
)

// Defines values for SearchParamsType.
const (
	DashDb     SearchParamsType = "dash-db"
	DashFolder SearchParamsType = "dash-folder"
)

// Defines values for SearchParamsPermission.
const (
	Edit SearchParamsPermission = "Edit"
	View SearchParamsPermission = "View"
)

// Defines values for SearchParamsSort.
const (
	SearchParamsSortAlphaAsc  SearchParamsSort = "alpha-asc"
	SearchParamsSortAlphaDesc SearchParamsSort = "alpha-desc"
)

// Ack defines model for Ack.
type Ack = map[string]interface{}

// ActiveSyncStatusDTO ActiveSyncStatusDTO holds the information for LDAP background Sync
type ActiveSyncStatusDTO struct {
	Enabled  *bool       `json:"enabled,omitempty"`
	NextSync *time.Time  `json:"nextSync,omitempty"`
	PrevSync *SyncResult `json:"prevSync,omitempty"`
	Schedule *string     `json:"schedule,omitempty"`
}

// ActiveUserStats defines model for ActiveUserStats.
type ActiveUserStats struct {
	ActiveAdminsAndEditors *int64 `json:"active_admins_and_editors,omitempty"`
	ActiveAnonymousDevices *int64 `json:"active_anonymous_devices,omitempty"`
	ActiveUsers            *int64 `json:"active_users,omitempty"`
	ActiveViewers          *int64 `json:"active_viewers,omitempty"`
}

// AddAPIKeyCommand defines model for AddAPIKeyCommand.
type AddAPIKeyCommand struct {
	Name          *string               `json:"name,omitempty"`
	Role          *AddAPIKeyCommandRole `json:"role,omitempty"`
	SecondsToLive *int64                `json:"secondsToLive,omitempty"`
}

// AddAPIKeyCommandRole defines model for AddAPIKeyCommand.Role.
type AddAPIKeyCommandRole string

// AddDataSourceCommand Also acts as api DTO
type AddDataSourceCommand struct {
	Access          *DsAccess          `json:"access,omitempty"`
	BasicAuth       *bool              `json:"basicAuth,omitempty"`
	BasicAuthUser   *string            `json:"basicAuthUser,omitempty"`
	Database        *string            `json:"database,omitempty"`
	IsDefault       *bool              `json:"isDefault,omitempty"`
	JsonData        *Json              `json:"jsonData,omitempty"`
	Name            *string            `json:"name,omitempty"`
	SecureJsonData  *map[string]string `json:"secureJsonData,omitempty"`
	Type            *string            `json:"type,omitempty"`
	Uid             *string            `json:"uid,omitempty"`
	Url             *string            `json:"url,omitempty"`
	User            *string            `json:"user,omitempty"`
	WithCredentials *bool              `json:"withCredentials,omitempty"`
}

// AddInviteForm defines model for AddInviteForm.
type AddInviteForm struct {
	LoginOrEmail *string            `json:"loginOrEmail,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Role         *AddInviteFormRole `json:"role,omitempty"`
	SendEmail    *bool              `json:"sendEmail,omitempty"`
}

// AddInviteFormRole defines model for AddInviteForm.Role.
type AddInviteFormRole string

// AddOrgUserCommand defines model for AddOrgUserCommand.
type AddOrgUserCommand struct {
	LoginOrEmail *string                `json:"loginOrEmail,omitempty"`
	Role         *AddOrgUserCommandRole `json:"role,omitempty"`
}

// AddOrgUserCommandRole defines model for AddOrgUserCommand.Role.
type AddOrgUserCommandRole string

// AddServiceAccountTokenCommand defines model for AddServiceAccountTokenCommand.
type AddServiceAccountTokenCommand struct {
	Name          *string `json:"name,omitempty"`
	SecondsToLive *int64  `json:"secondsToLive,omitempty"`
}

// AddTeamMemberCommand defines model for AddTeamMemberCommand.
type AddTeamMemberCommand struct {
	UserId *int64 `json:"userId,omitempty"`
}

// AddTeamRoleCommand defines model for AddTeamRoleCommand.
type AddTeamRoleCommand struct {
	RoleUid *string `json:"roleUid,omitempty"`
}

// AddUserRoleCommand defines model for AddUserRoleCommand.
type AddUserRoleCommand struct {
	Global  *bool   `json:"global,omitempty"`
	RoleUid *string `json:"roleUid,omitempty"`
}

// Address defines model for Address.
type Address struct {
	Address1 *string `json:"address1,omitempty"`
	Address2 *string `json:"address2,omitempty"`
	City     *string `json:"city,omitempty"`
	Country  *string `json:"country,omitempty"`
	State    *string `json:"state,omitempty"`
	ZipCode  *string `json:"zipCode,omitempty"`
}

// AdminCreateUserForm defines model for AdminCreateUserForm.
type AdminCreateUserForm struct {
	Email    *string `json:"email,omitempty"`
	Login    *string `json:"login,omitempty"`
	Name     *string `json:"name,omitempty"`
	OrgId    *int64  `json:"orgId,omitempty"`
	Password *string `json:"password,omitempty"`
}

// AdminCreateUserResponse defines model for AdminCreateUserResponse.
type AdminCreateUserResponse struct {
	Id      *int64  `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// AdminStats defines model for AdminStats.
type AdminStats struct {
	ActiveAdmins        *int64 `json:"activeAdmins,omitempty"`
	ActiveDevices       *int64 `json:"activeDevices,omitempty"`
	ActiveEditors       *int64 `json:"activeEditors,omitempty"`
	ActiveSessions      *int64 `json:"activeSessions,omitempty"`
	ActiveUsers         *int64 `json:"activeUsers,omitempty"`
	ActiveViewers       *int64 `json:"activeViewers,omitempty"`
	Admins              *int64 `json:"admins,omitempty"`
	Alerts              *int64 `json:"alerts,omitempty"`
	DailyActiveAdmins   *int64 `json:"dailyActiveAdmins,omitempty"`
	DailyActiveEditors  *int64 `json:"dailyActiveEditors,omitempty"`
	DailyActiveSessions *int64 `json:"dailyActiveSessions,omitempty"`
	DailyActiveUsers    *int64 `json:"dailyActiveUsers,omitempty"`
	DailyActiveViewers  *int64 `json:"dailyActiveViewers,omitempty"`
	Dashboards          *int64 `json:"dashboards,omitempty"`
	Datasources         *int64 `json:"datasources,omitempty"`
	Editors             *int64 `json:"editors,omitempty"`
	MonthlyActiveUsers  *int64 `json:"monthlyActiveUsers,omitempty"`
	Orgs                *int64 `json:"orgs,omitempty"`
	Playlists           *int64 `json:"playlists,omitempty"`
	Snapshots           *int64 `json:"snapshots,omitempty"`
	Stars               *int64 `json:"stars,omitempty"`
	Tags                *int64 `json:"tags,omitempty"`
	Users               *int64 `json:"users,omitempty"`
	Viewers             *int64 `json:"viewers,omitempty"`
}

// AdminUpdateUserPasswordForm defines model for AdminUpdateUserPasswordForm.
type AdminUpdateUserPasswordForm struct {
	Password *string `json:"password,omitempty"`
}

// AdminUpdateUserPermissionsForm defines model for AdminUpdateUserPermissionsForm.
type AdminUpdateUserPermissionsForm struct {
	IsGrafanaAdmin *bool `json:"isGrafanaAdmin,omitempty"`
}

// AlertListItemDTO defines model for AlertListItemDTO.
type AlertListItemDTO struct {
	DashboardId    *int64          `json:"dashboardId,omitempty"`
	DashboardSlug  *string         `json:"dashboardSlug,omitempty"`
	DashboardUid   *string         `json:"dashboardUid,omitempty"`
	EvalData       *Json           `json:"evalData,omitempty"`
	EvalDate       *time.Time      `json:"evalDate,omitempty"`
	ExecutionError *string         `json:"executionError,omitempty"`
	Id             *int64          `json:"id,omitempty"`
	Name           *string         `json:"name,omitempty"`
	NewStateDate   *time.Time      `json:"newStateDate,omitempty"`
	PanelId        *int64          `json:"panelId,omitempty"`
	State          *AlertStateType `json:"state,omitempty"`
	Url            *string         `json:"url,omitempty"`
}

// AlertNotification defines model for AlertNotification.
type AlertNotification struct {
	Created               *time.Time       `json:"created,omitempty"`
	DisableResolveMessage *bool            `json:"disableResolveMessage,omitempty"`
	Frequency             *string          `json:"frequency,omitempty"`
	Id                    *int64           `json:"id,omitempty"`
	IsDefault             *bool            `json:"isDefault,omitempty"`
	Name                  *string          `json:"name,omitempty"`
	SecureFields          *map[string]bool `json:"secureFields,omitempty"`
	SendReminder          *bool            `json:"sendReminder,omitempty"`
	Settings              *Json            `json:"settings,omitempty"`
	Type                  *string          `json:"type,omitempty"`
	Uid                   *string          `json:"uid,omitempty"`
	Updated               *time.Time       `json:"updated,omitempty"`
}

// AlertNotificationLookup defines model for AlertNotificationLookup.
type AlertNotificationLookup struct {
	Id        *int64  `json:"id,omitempty"`
	IsDefault *bool   `json:"isDefault,omitempty"`
	Name      *string `json:"name,omitempty"`
	Type      *string `json:"type,omitempty"`
	Uid       *string `json:"uid,omitempty"`
}

// AlertQuery defines model for AlertQuery.
type AlertQuery struct {
	// DatasourceUid Grafana data source unique identifier; it should be '__expr__' for a Server Side Expression operation.
	DatasourceUid *string `json:"datasourceUid,omitempty"`

	// Model JSON is the raw JSON query and includes the above properties as well as custom properties.
	Model *map[string]interface{} `json:"model,omitempty"`

	// QueryType QueryType is an optional identifier for the type of query.
	// It can be used to distinguish different types of queries.
	QueryType *string `json:"queryType,omitempty"`

	// RefId RefID is the unique identifier of the query, set by the frontend call.
	RefId *string `json:"refId,omitempty"`

	// RelativeTimeRange RelativeTimeRange is the per query start and end time
	// for requests.
	RelativeTimeRange *RelativeTimeRange `json:"relativeTimeRange,omitempty"`
}

// AlertQueryExport defines model for AlertQueryExport.
type AlertQueryExport struct {
	DatasourceUid     *string                  `json:"datasourceUid,omitempty"`
	Model             *map[string]interface{}  `json:"model,omitempty"`
	QueryType         *string                  `json:"queryType,omitempty"`
	RefId             *string                  `json:"refId,omitempty"`
	RelativeTimeRange *RelativeTimeRangeExport `json:"relativeTimeRange,omitempty"`
}

// AlertRuleExport defines model for AlertRuleExport.
type AlertRuleExport struct {
	Annotations  *map[string]string           `json:"annotations,omitempty"`
	Condition    *string                      `json:"condition,omitempty"`
	DasboardUid  *string                      `json:"dasboardUid,omitempty"`
	Data         *[]AlertQueryExport          `json:"data,omitempty"`
	ExecErrState *AlertRuleExportExecErrState `json:"execErrState,omitempty"`

	// For A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	For         *Duration                   `json:"for,omitempty"`
	IsPaused    *bool                       `json:"isPaused,omitempty"`
	Labels      *map[string]string          `json:"labels,omitempty"`
	NoDataState *AlertRuleExportNoDataState `json:"noDataState,omitempty"`
	PanelId     *int64                      `json:"panelId,omitempty"`
	Title       *string                     `json:"title,omitempty"`
	Uid         *string                     `json:"uid,omitempty"`
}

// AlertRuleExportExecErrState defines model for AlertRuleExport.ExecErrState.
type AlertRuleExportExecErrState string

// AlertRuleExportNoDataState defines model for AlertRuleExport.NoDataState.
type AlertRuleExportNoDataState string

// AlertRuleGroup defines model for AlertRuleGroup.
type AlertRuleGroup struct {
	FolderUid *string                 `json:"folderUid,omitempty"`
	Interval  *int64                  `json:"interval,omitempty"`
	Rules     *[]ProvisionedAlertRule `json:"rules,omitempty"`
	Title     *string                 `json:"title,omitempty"`
}

// AlertRuleGroupExport defines model for AlertRuleGroupExport.
type AlertRuleGroupExport struct {
	Folder *string `json:"folder,omitempty"`

	// Interval A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	Interval *Duration          `json:"interval,omitempty"`
	Name     *string            `json:"name,omitempty"`
	OrgId    *int64             `json:"orgId,omitempty"`
	Rules    *[]AlertRuleExport `json:"rules,omitempty"`
}

// AlertStateInfoDTO defines model for AlertStateInfoDTO.
type AlertStateInfoDTO struct {
	DashboardId  *int64          `json:"dashboardId,omitempty"`
	Id           *int64          `json:"id,omitempty"`
	NewStateDate *time.Time      `json:"newStateDate,omitempty"`
	PanelId      *int64          `json:"panelId,omitempty"`
	State        *AlertStateType `json:"state,omitempty"`
}

// AlertStateType defines model for AlertStateType.
type AlertStateType = string

// AlertTestCommand defines model for AlertTestCommand.
type AlertTestCommand struct {
	Dashboard *Json  `json:"dashboard,omitempty"`
	PanelId   *int64 `json:"panelId,omitempty"`
}

// AlertTestResult defines model for AlertTestResult.
type AlertTestResult struct {
	ConditionEvals *string               `json:"conditionEvals,omitempty"`
	Error          *string               `json:"error,omitempty"`
	Firing         *bool                 `json:"firing,omitempty"`
	Logs           *[]AlertTestResultLog `json:"logs,omitempty"`
	Matches        *[]EvalMatch          `json:"matches,omitempty"`
	State          *AlertStateType       `json:"state,omitempty"`
	TimeMs         *string               `json:"timeMs,omitempty"`
}

// AlertTestResultLog defines model for AlertTestResultLog.
type AlertTestResultLog struct {
	Data    *interface{} `json:"data,omitempty"`
	Message *string      `json:"message,omitempty"`
}

// AlertingFileExport defines model for AlertingFileExport.
type AlertingFileExport struct {
	ApiVersion    *int64                      `json:"apiVersion,omitempty"`
	ContactPoints *[]ContactPointExport       `json:"contactPoints,omitempty"`
	Groups        *[]AlertRuleGroupExport     `json:"groups,omitempty"`
	MuteTimes     *[]MuteTimeIntervalExport   `json:"muteTimes,omitempty"`
	Policies      *[]NotificationPolicyExport `json:"policies,omitempty"`
}

// Annotation defines model for Annotation.
type Annotation struct {
	AlertId      *int64    `json:"alertId,omitempty"`
	AlertName    *string   `json:"alertName,omitempty"`
	AvatarUrl    *string   `json:"avatarUrl,omitempty"`
	Created      *int64    `json:"created,omitempty"`
	DashboardId  *int64    `json:"dashboardId,omitempty"`
	DashboardUID *string   `json:"dashboardUID,omitempty"`
	Data         *Json     `json:"data,omitempty"`
	Email        *string   `json:"email,omitempty"`
	Id           *int64    `json:"id,omitempty"`
	Login        *string   `json:"login,omitempty"`
	NewState     *string   `json:"newState,omitempty"`
	PanelId      *int64    `json:"panelId,omitempty"`
	PrevState    *string   `json:"prevState,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	Text         *string   `json:"text,omitempty"`
	Time         *int64    `json:"time,omitempty"`
	TimeEnd      *int64    `json:"timeEnd,omitempty"`
	Updated      *int64    `json:"updated,omitempty"`
	UserId       *int64    `json:"userId,omitempty"`
}

// AnnotationActions defines model for AnnotationActions.
type AnnotationActions struct {
	CanAdd    *bool `json:"canAdd,omitempty"`
	CanDelete *bool `json:"canDelete,omitempty"`
	CanEdit   *bool `json:"canEdit,omitempty"`
}

// AnnotationEvent defines model for AnnotationEvent.
type AnnotationEvent struct {
	Color       *string `json:"color,omitempty"`
	DashboardId *int64  `json:"dashboardId,omitempty"`
	Id          *int64  `json:"id,omitempty"`
	IsRegion    *bool   `json:"isRegion,omitempty"`
	PanelId     *int64  `json:"panelId,omitempty"`

	// Source TODO docs
	// FROM: AnnotationQuery in grafana-data/src/types/annotations.ts
	Source  *AnnotationQuery `json:"source,omitempty"`
	Tags    *[]string        `json:"tags,omitempty"`
	Text    *string          `json:"text,omitempty"`
	Time    *int64           `json:"time,omitempty"`
	TimeEnd *int64           `json:"timeEnd,omitempty"`
}

// AnnotationPanelFilter defines model for AnnotationPanelFilter.
type AnnotationPanelFilter struct {
	// Exclude Should the specified panels be included or excluded
	Exclude *bool `json:"exclude,omitempty"`

	// Ids Panel IDs that should be included or excluded
	Ids *[]int64 `json:"ids,omitempty"`
}

// AnnotationPermission defines model for AnnotationPermission.
type AnnotationPermission struct {
	Dashboard    *AnnotationActions `json:"dashboard,omitempty"`
	Organization *AnnotationActions `json:"organization,omitempty"`
}

// AnnotationQuery TODO docs
// FROM: AnnotationQuery in grafana-data/src/types/annotations.ts
type AnnotationQuery struct {
	// BuiltIn Set to 1 for the standard annotation query all dashboards have by default.
	BuiltIn *float32 `json:"builtIn,omitempty"`

	// Datasource Ref to a DataSource instance
	Datasource *DataSourceRef `json:"datasource,omitempty"`

	// Enable When enabled the annotation query is issued with every dashboard refresh
	Enable *bool                  `json:"enable,omitempty"`
	Filter *AnnotationPanelFilter `json:"filter,omitempty"`

	// Hide Annotation queries can be toggled on or off at the top of the dashboard.
	// When hide is true, the toggle is not shown in the dashboard.
	Hide *bool `json:"hide,omitempty"`

	// IconColor Color to use for the annotation event markers
	IconColor *string `json:"iconColor,omitempty"`

	// Name Name of annotation.
	Name *string `json:"name,omitempty"`

	// Target TODO: this should be a regular DataQuery that depends on the selected dashboard
	// these match the properties of the "grafana" datasouce that is default in most dashboards
	Target *AnnotationTarget `json:"target,omitempty"`

	// Type TODO -- this should not exist here, it is based on the --grafana-- datasource
	Type *string `json:"type,omitempty"`
}

// AnnotationTarget TODO: this should be a regular DataQuery that depends on the selected dashboard
// these match the properties of the "grafana" datasouce that is default in most dashboards
type AnnotationTarget struct {
	// Limit Only required/valid for the grafana datasource...
	// but code+tests is already depending on it so hard to change
	Limit *int64 `json:"limit,omitempty"`

	// MatchAny Only required/valid for the grafana datasource...
	// but code+tests is already depending on it so hard to change
	MatchAny *bool `json:"matchAny,omitempty"`

	// Tags Only required/valid for the grafana datasource...
	// but code+tests is already depending on it so hard to change
	Tags *[]string `json:"tags,omitempty"`

	// Type Only required/valid for the grafana datasource...
	// but code+tests is already depending on it so hard to change
	Type *string `json:"type,omitempty"`
}

// ApiKeyDTO defines model for ApiKeyDTO.
type ApiKeyDTO struct {
	// AccessControl Metadata contains user accesses for a given resource
	// Ex: map[string]bool{"create":true, "delete": true}
	AccessControl *Metadata      `json:"accessControl,omitempty"`
	Expiration    *time.Time     `json:"expiration,omitempty"`
	Id            *int64         `json:"id,omitempty"`
	LastUsedAt    *time.Time     `json:"lastUsedAt,omitempty"`
	Name          *string        `json:"name,omitempty"`
	Role          *ApiKeyDTORole `json:"role,omitempty"`
}

// ApiKeyDTORole defines model for ApiKeyDTO.Role.
type ApiKeyDTORole string

// Assignments defines model for Assignments.
type Assignments struct {
	BuiltInRoles    *bool `json:"builtInRoles,omitempty"`
	ServiceAccounts *bool `json:"serviceAccounts,omitempty"`
	Teams           *bool `json:"teams,omitempty"`
	Users           *bool `json:"users,omitempty"`
}

// AttributeTypeAndValue AttributeTypeAndValue mirrors the ASN.1 structure of the same name in
// RFC 5280, Section 4.1.2.4.
type AttributeTypeAndValue struct {
	Type  *ObjectIdentifier `json:"Type,omitempty"`
	Value *interface{}      `json:"Value,omitempty"`
}

// CalculateDiffTarget defines model for CalculateDiffTarget.
type CalculateDiffTarget struct {
	DashboardId      *int64 `json:"dashboardId,omitempty"`
	UnsavedDashboard *Json  `json:"unsavedDashboard,omitempty"`
	Version          *int64 `json:"version,omitempty"`
}

// Certificate defines model for Certificate.
type Certificate struct {
	AuthorityKeyId *[]uint8 `json:"AuthorityKeyId,omitempty"`

	// BasicConstraintsValid BasicConstraintsValid indicates whether IsCA, MaxPathLen,
	// and MaxPathLenZero are valid.
	BasicConstraintsValid *bool `json:"BasicConstraintsValid,omitempty"`

	// CRLDistributionPoints CRL Distribution Points
	CRLDistributionPoints *[]string `json:"CRLDistributionPoints,omitempty"`

	// DNSNames Subject Alternate Name values. (Note that these values may not be valid
	// if invalid values were contained within a parsed certificate. For
	// example, an element of DNSNames may not be a valid DNS domain name.)
	DNSNames               *[]string      `json:"DNSNames,omitempty"`
	EmailAddresses         *[]string      `json:"EmailAddresses,omitempty"`
	ExcludedDNSDomains     *[]string      `json:"ExcludedDNSDomains,omitempty"`
	ExcludedEmailAddresses *[]string      `json:"ExcludedEmailAddresses,omitempty"`
	ExcludedIPRanges       *[]IPNet       `json:"ExcludedIPRanges,omitempty"`
	ExcludedURIDomains     *[]string      `json:"ExcludedURIDomains,omitempty"`
	ExtKeyUsage            *[]ExtKeyUsage `json:"ExtKeyUsage,omitempty"`

	// Extensions Extensions contains raw X.509 extensions. When parsing certificates,
	// this can be used to extract non-critical extensions that are not
	// parsed by this package. When marshaling certificates, the Extensions
	// field is ignored, see ExtraExtensions.
	Extensions *[]Extension `json:"Extensions,omitempty"`

	// ExtraExtensions ExtraExtensions contains extensions to be copied, raw, into any
	// marshaled certificates. Values override any extensions that would
	// otherwise be produced based on the other fields. The ExtraExtensions
	// field is not populated when parsing certificates, see Extensions.
	ExtraExtensions *[]Extension `json:"ExtraExtensions,omitempty"`
	IPAddresses     *[]string    `json:"IPAddresses,omitempty"`
	IsCA            *bool        `json:"IsCA,omitempty"`

	// Issuer Name represents an X.509 distinguished name. This only includes the common
	// elements of a DN. Note that Name is only an approximation of the X.509
	// structure. If an accurate representation is needed, asn1.Unmarshal the raw
	// subject or issuer as an RDNSequence.
	Issuer                *Name     `json:"Issuer,omitempty"`
	IssuingCertificateURL *[]string `json:"IssuingCertificateURL,omitempty"`

	// KeyUsage KeyUsage represents the set of actions that are valid for a given key. It's
	// a bitmap of the KeyUsage* constants.
	KeyUsage *KeyUsage `json:"KeyUsage,omitempty"`

	// MaxPathLen MaxPathLen and MaxPathLenZero indicate the presence and
	// value of the BasicConstraints' "pathLenConstraint".
	//
	// When parsing a certificate, a positive non-zero MaxPathLen
	// means that the field was specified, -1 means it was unset,
	// and MaxPathLenZero being true mean that the field was
	// explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false
	// should be treated equivalent to -1 (unset).
	//
	// When generating a certificate, an unset pathLenConstraint
	// can be requested with either MaxPathLen == -1 or using the
	// zero value for both MaxPathLen and MaxPathLenZero.
	MaxPathLen *int64 `json:"MaxPathLen,omitempty"`

	// MaxPathLenZero MaxPathLenZero indicates that BasicConstraintsValid==true
	// and MaxPathLen==0 should be interpreted as an actual
	// maximum path length of zero. Otherwise, that combination is
	// interpreted as MaxPathLen not being set.
	MaxPathLenZero *bool      `json:"MaxPathLenZero,omitempty"`
	NotBefore      *time.Time `json:"NotBefore,omitempty"`

	// OCSPServer RFC 5280, 4.2.2.1 (Authority Information Access)
	OCSPServer          *[]string `json:"OCSPServer,omitempty"`
	PermittedDNSDomains *[]string `json:"PermittedDNSDomains,omitempty"`

	// PermittedDNSDomainsCritical Name constraints
	PermittedDNSDomainsCritical *bool               `json:"PermittedDNSDomainsCritical,omitempty"`
	PermittedEmailAddresses     *[]string           `json:"PermittedEmailAddresses,omitempty"`
	PermittedIPRanges           *[]IPNet            `json:"PermittedIPRanges,omitempty"`
	PermittedURIDomains         *[]string           `json:"PermittedURIDomains,omitempty"`
	PolicyIdentifiers           *[]ObjectIdentifier `json:"PolicyIdentifiers,omitempty"`
	PublicKey                   *interface{}        `json:"PublicKey,omitempty"`
	PublicKeyAlgorithm          *PublicKeyAlgorithm `json:"PublicKeyAlgorithm,omitempty"`
	Raw                         *[]uint8            `json:"Raw,omitempty"`
	RawIssuer                   *[]uint8            `json:"RawIssuer,omitempty"`
	RawSubject                  *[]uint8            `json:"RawSubject,omitempty"`
	RawSubjectPublicKeyInfo     *[]uint8            `json:"RawSubjectPublicKeyInfo,omitempty"`
	RawTBSCertificate           *[]uint8            `json:"RawTBSCertificate,omitempty"`
	SerialNumber                *string             `json:"SerialNumber,omitempty"`
	Signature                   *[]uint8            `json:"Signature,omitempty"`
	SignatureAlgorithm          *SignatureAlgorithm `json:"SignatureAlgorithm,omitempty"`

	// Subject Name represents an X.509 distinguished name. This only includes the common
	// elements of a DN. Note that Name is only an approximation of the X.509
	// structure. If an accurate representation is needed, asn1.Unmarshal the raw
	// subject or issuer as an RDNSequence.
	Subject      *Name    `json:"Subject,omitempty"`
	SubjectKeyId *[]uint8 `json:"SubjectKeyId,omitempty"`
	URIs         *[]URL   `json:"URIs,omitempty"`

	// UnhandledCriticalExtensions UnhandledCriticalExtensions contains a list of extension IDs that
	// were not (fully) processed when parsing. Verify will fail if this
	// slice is non-empty, unless verification is delegated to an OS
	// library which understands all the critical extensions.
	//
	// Users can access these extensions using Extensions and can remove
	// elements from this slice if they believe that they have been
	// handled.
	UnhandledCriticalExtensions *[]ObjectIdentifier `json:"UnhandledCriticalExtensions,omitempty"`
	UnknownExtKeyUsage          *[]ObjectIdentifier `json:"UnknownExtKeyUsage,omitempty"`
	Version                     *int64              `json:"Version,omitempty"`
}

// ChangeUserPasswordCommand defines model for ChangeUserPasswordCommand.
type ChangeUserPasswordCommand struct {
	NewPassword *string `json:"newPassword,omitempty"`
	OldPassword *string `json:"oldPassword,omitempty"`
}

// ConfFloat64 ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
// to null.
type ConfFloat64 = float64

// ContactPointExport defines model for ContactPointExport.
type ContactPointExport struct {
	Name      *string           `json:"name,omitempty"`
	OrgId     *int64            `json:"orgId,omitempty"`
	Receivers *[]ReceiverExport `json:"receivers,omitempty"`
}

// ContactPoints defines model for ContactPoints.
type ContactPoints = []EmbeddedContactPoint

// CookiePreferences defines model for CookiePreferences.
type CookiePreferences struct {
	Analytics   *map[string]interface{} `json:"analytics,omitempty"`
	Functional  *map[string]interface{} `json:"functional,omitempty"`
	Performance *map[string]interface{} `json:"performance,omitempty"`
}

// CookieType defines model for CookieType.
type CookieType = string

// Correlation Correlation is the model for correlations definitions
type Correlation struct {
	Config *CorrelationConfig `json:"config,omitempty"`

	// Description Description of the correlation
	Description *string `json:"description,omitempty"`

	// Label Label identifying the correlation
	Label *string `json:"label,omitempty"`

	// OrgId OrgID of the data source the correlation originates from
	OrgId *int64 `json:"orgId,omitempty"`

	// Provisioned Provisioned True if the correlation was created during provisioning
	Provisioned *bool `json:"provisioned,omitempty"`

	// SourceUID UID of the data source the correlation originates from
	SourceUID *string `json:"sourceUID,omitempty"`

	// TargetUID UID of the data source the correlation points to
	TargetUID *string `json:"targetUID,omitempty"`

	// Uid Unique identifier of the correlation
	Uid *string `json:"uid,omitempty"`
}

// CorrelationConfig defines model for CorrelationConfig.
type CorrelationConfig struct {
	// Field Field used to attach the correlation link
	Field string `json:"field"`

	// Target Target data query
	Target          map[string]interface{} `json:"target"`
	Transformations *Transformations       `json:"transformations,omitempty"`
	Type            CorrelationConfigType  `json:"type"`
}

// CorrelationConfigType defines model for CorrelationConfigType.
type CorrelationConfigType = string

// CorrelationConfigUpdateDTO defines model for CorrelationConfigUpdateDTO.
type CorrelationConfigUpdateDTO struct {
	// Field Field used to attach the correlation link
	Field *string `json:"field,omitempty"`

	// Target Target data query
	Target *map[string]interface{} `json:"target,omitempty"`

	// Transformations Source data transformations
	Transformations *[]Transformation      `json:"transformations,omitempty"`
	Type            *CorrelationConfigType `json:"type,omitempty"`
}

// CreateAlertNotificationCommand defines model for CreateAlertNotificationCommand.
type CreateAlertNotificationCommand struct {
	DisableResolveMessage *bool              `json:"disableResolveMessage,omitempty"`
	Frequency             *string            `json:"frequency,omitempty"`
	IsDefault             *bool              `json:"isDefault,omitempty"`
	Name                  *string            `json:"name,omitempty"`
	SecureSettings        *map[string]string `json:"secureSettings,omitempty"`
	SendReminder          *bool              `json:"sendReminder,omitempty"`
	Settings              *Json              `json:"settings,omitempty"`
	Type                  *string            `json:"type,omitempty"`
	Uid                   *string            `json:"uid,omitempty"`
}

// CreateCorrelationCommand CreateCorrelationCommand is the command for creating a correlation
type CreateCorrelationCommand struct {
	Config *CorrelationConfig `json:"config,omitempty"`

	// Description Optional description of the correlation
	Description *string `json:"description,omitempty"`

	// Label Optional label identifying the correlation
	Label *string `json:"label,omitempty"`

	// Provisioned True if correlation was created with provisioning. This makes it read-only.
	Provisioned *bool `json:"provisioned,omitempty"`

	// TargetUID Target data source UID to which the correlation is created. required if config.type = query
	TargetUID *string `json:"targetUID,omitempty"`
}

// CreateCorrelationResponseBody CreateCorrelationResponse is the response struct for CreateCorrelationCommand
type CreateCorrelationResponseBody struct {
	Message *string `json:"message,omitempty"`

	// Result Correlation is the model for correlations definitions
	Result *Correlation `json:"result,omitempty"`
}

// CreateDashboardSnapshotCommand defines model for CreateDashboardSnapshotCommand.
type CreateDashboardSnapshotCommand struct {
	Dashboard Json `json:"dashboard"`

	// DeleteKey Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.
	DeleteKey *string `json:"deleteKey,omitempty"`

	// Expires When the snapshot should expire in seconds in seconds. Default is never to expire.
	Expires *int64 `json:"expires,omitempty"`

	// External these are passed when storing an external snapshot ref
	// Save the snapshot on an external server rather than locally.
	External *bool `json:"external,omitempty"`

	// Key Define the unique key. Required if `external` is `true`.
	Key *string `json:"key,omitempty"`

	// Name Snapshot name
	Name *string `json:"name,omitempty"`
}

// CreateFolderCommand CreateFolderCommand captures the information required by the folder service
// to create a folder.
type CreateFolderCommand struct {
	Description *string `json:"description,omitempty"`
	ParentUid   *string `json:"parentUid,omitempty"`
	Title       *string `json:"title,omitempty"`
	Uid         *string `json:"uid,omitempty"`
}

// CreateLibraryElementCommand CreateLibraryElementCommand is the command for adding a LibraryElement
type CreateLibraryElementCommand struct {
	// FolderId ID of the folder where the library element is stored.
	//
	// Deprecated: use FolderUID instead
	FolderId *int64 `json:"folderId,omitempty"`

	// FolderUid UID of the folder where the library element is stored.
	FolderUid *string `json:"folderUid,omitempty"`

	// Kind Kind of element to create, Use 1 for library panels or 2 for c.
	// Description:
	// 1 - library panels
	// 2 - library variables
	Kind *CreateLibraryElementCommandKind `json:"kind,omitempty"`

	// Model The JSON model for the library element.
	Model *map[string]interface{} `json:"model,omitempty"`

	// Name Name of the library element.
	Name *string `json:"name,omitempty"`
	Uid  *string `json:"uid,omitempty"`
}

// CreateLibraryElementCommandKind Kind of element to create, Use 1 for library panels or 2 for c.
// Description:
// 1 - library panels
// 2 - library variables
type CreateLibraryElementCommandKind int64

// CreateOrUpdateReportConfig defines model for CreateOrUpdateReportConfig.
type CreateOrUpdateReportConfig struct {
	DashboardId        *int64                  `json:"dashboardId,omitempty"`
	DashboardUid       *string                 `json:"dashboardUid,omitempty"`
	Dashboards         *[]ReportDashboard      `json:"dashboards,omitempty"`
	EnableCsv          *bool                   `json:"enableCsv,omitempty"`
	EnableDashboardUrl *bool                   `json:"enableDashboardUrl,omitempty"`
	Formats            *[]Type                 `json:"formats,omitempty"`
	Message            *string                 `json:"message,omitempty"`
	Name               *string                 `json:"name,omitempty"`
	Options            *ReportOptions          `json:"options,omitempty"`
	Recipients         *string                 `json:"recipients,omitempty"`
	ReplyTo            *string                 `json:"replyTo,omitempty"`
	ScaleFactor        *int64                  `json:"scaleFactor,omitempty"`
	Schedule           *ReportSchedule         `json:"schedule,omitempty"`
	State              *State                  `json:"state,omitempty"`
	TemplateVars       *map[string]interface{} `json:"templateVars,omitempty"`
}

// CreateOrgCommand defines model for CreateOrgCommand.
type CreateOrgCommand struct {
	Name *string `json:"name,omitempty"`
}

// CreatePlaylistCommand defines model for CreatePlaylistCommand.
type CreatePlaylistCommand struct {
	Interval *string         `json:"interval,omitempty"`
	Items    *[]PlaylistItem `json:"items,omitempty"`
	Name     *string         `json:"name,omitempty"`
}

// CreateQueryInQueryHistoryCommand CreateQueryInQueryHistoryCommand is the command for adding query history
type CreateQueryInQueryHistoryCommand struct {
	// DatasourceUid UID of the data source for which are queries stored.
	DatasourceUid *string `json:"datasourceUid,omitempty"`
	Queries       Json    `json:"queries"`
}

// CreateRoleForm defines model for CreateRoleForm.
type CreateRoleForm struct {
	Description *string       `json:"description,omitempty"`
	DisplayName *string       `json:"displayName,omitempty"`
	Global      *bool         `json:"global,omitempty"`
	Group       *string       `json:"group,omitempty"`
	Hidden      *bool         `json:"hidden,omitempty"`
	Name        *string       `json:"name,omitempty"`
	Permissions *[]Permission `json:"permissions,omitempty"`
	Uid         *string       `json:"uid,omitempty"`
	Version     *int64        `json:"version,omitempty"`
}

// CreateServiceAccountForm defines model for CreateServiceAccountForm.
type CreateServiceAccountForm struct {
	IsDisabled *bool                         `json:"isDisabled,omitempty"`
	Name       *string                       `json:"name,omitempty"`
	Role       *CreateServiceAccountFormRole `json:"role,omitempty"`
}

// CreateServiceAccountFormRole defines model for CreateServiceAccountForm.Role.
type CreateServiceAccountFormRole string

// CreateTeamCommand defines model for CreateTeamCommand.
type CreateTeamCommand struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// DashboardACLInfoDTO defines model for DashboardACLInfoDTO.
type DashboardACLInfoDTO struct {
	Created     *time.Time `json:"created,omitempty"`
	DashboardId *int64     `json:"dashboardId,omitempty"`

	// FolderId Deprecated: use FolderUID instead
	FolderId       *int64                   `json:"folderId,omitempty"`
	FolderUid      *string                  `json:"folderUid,omitempty"`
	Inherited      *bool                    `json:"inherited,omitempty"`
	IsFolder       *bool                    `json:"isFolder,omitempty"`
	Permission     *PermissionType          `json:"permission,omitempty"`
	PermissionName *string                  `json:"permissionName,omitempty"`
	Role           *DashboardACLInfoDTORole `json:"role,omitempty"`
	Slug           *string                  `json:"slug,omitempty"`
	Team           *string                  `json:"team,omitempty"`
	TeamAvatarUrl  *string                  `json:"teamAvatarUrl,omitempty"`
	TeamEmail      *string                  `json:"teamEmail,omitempty"`
	TeamId         *int64                   `json:"teamId,omitempty"`
	Title          *string                  `json:"title,omitempty"`
	Uid            *string                  `json:"uid,omitempty"`
	Updated        *time.Time               `json:"updated,omitempty"`
	Url            *string                  `json:"url,omitempty"`
	UserAvatarUrl  *string                  `json:"userAvatarUrl,omitempty"`
	UserEmail      *string                  `json:"userEmail,omitempty"`
	UserId         *int64                   `json:"userId,omitempty"`
	UserLogin      *string                  `json:"userLogin,omitempty"`
}

// DashboardACLInfoDTORole defines model for DashboardACLInfoDTO.Role.
type DashboardACLInfoDTORole string

// DashboardACLUpdateItem defines model for DashboardACLUpdateItem.
type DashboardACLUpdateItem struct {
	Permission *PermissionType             `json:"permission,omitempty"`
	Role       *DashboardACLUpdateItemRole `json:"role,omitempty"`
	TeamId     *int64                      `json:"teamId,omitempty"`
	UserId     *int64                      `json:"userId,omitempty"`
}

// DashboardACLUpdateItemRole defines model for DashboardACLUpdateItem.Role.
type DashboardACLUpdateItemRole string

// DashboardFullWithMeta defines model for DashboardFullWithMeta.
type DashboardFullWithMeta struct {
	Dashboard *Json          `json:"dashboard,omitempty"`
	Meta      *DashboardMeta `json:"meta,omitempty"`
}

// DashboardMeta defines model for DashboardMeta.
type DashboardMeta struct {
	AnnotationsPermissions *AnnotationPermission `json:"annotationsPermissions,omitempty"`
	CanAdmin               *bool                 `json:"canAdmin,omitempty"`
	CanDelete              *bool                 `json:"canDelete,omitempty"`
	CanEdit                *bool                 `json:"canEdit,omitempty"`
	CanSave                *bool                 `json:"canSave,omitempty"`
	CanStar                *bool                 `json:"canStar,omitempty"`
	Created                *time.Time            `json:"created,omitempty"`
	CreatedBy              *string               `json:"createdBy,omitempty"`
	Expires                *time.Time            `json:"expires,omitempty"`

	// FolderId Deprecated: use FolderUID instead
	FolderId               *int64     `json:"folderId,omitempty"`
	FolderTitle            *string    `json:"folderTitle,omitempty"`
	FolderUid              *string    `json:"folderUid,omitempty"`
	FolderUrl              *string    `json:"folderUrl,omitempty"`
	HasAcl                 *bool      `json:"hasAcl,omitempty"`
	IsFolder               *bool      `json:"isFolder,omitempty"`
	IsSnapshot             *bool      `json:"isSnapshot,omitempty"`
	IsStarred              *bool      `json:"isStarred,omitempty"`
	Provisioned            *bool      `json:"provisioned,omitempty"`
	ProvisionedExternalId  *string    `json:"provisionedExternalId,omitempty"`
	PublicDashboardEnabled *bool      `json:"publicDashboardEnabled,omitempty"`
	PublicDashboardUid     *string    `json:"publicDashboardUid,omitempty"`
	Slug                   *string    `json:"slug,omitempty"`
	Type                   *string    `json:"type,omitempty"`
	Updated                *time.Time `json:"updated,omitempty"`
	UpdatedBy              *string    `json:"updatedBy,omitempty"`
	Url                    *string    `json:"url,omitempty"`
	Version                *int64     `json:"version,omitempty"`
}

// DashboardSnapshotDTO DashboardSnapshotDTO without dashboard map
type DashboardSnapshotDTO struct {
	Created     *time.Time `json:"created,omitempty"`
	Expires     *time.Time `json:"expires,omitempty"`
	External    *bool      `json:"external,omitempty"`
	ExternalUrl *string    `json:"externalUrl,omitempty"`
	Key         *string    `json:"key,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Updated     *time.Time `json:"updated,omitempty"`
}

// DashboardTagCloudItem defines model for DashboardTagCloudItem.
type DashboardTagCloudItem struct {
	Count *int64  `json:"count,omitempty"`
	Term  *string `json:"term,omitempty"`
}

// DashboardVersionMeta DashboardVersionMeta extends the DashboardVersionDTO with the names
// associated with the UserIds, overriding the field with the same name from
// the DashboardVersionDTO model.
type DashboardVersionMeta struct {
	Created       *time.Time `json:"created,omitempty"`
	CreatedBy     *string    `json:"createdBy,omitempty"`
	DashboardId   *int64     `json:"dashboardId,omitempty"`
	Data          *Json      `json:"data,omitempty"`
	Id            *int64     `json:"id,omitempty"`
	Message       *string    `json:"message,omitempty"`
	ParentVersion *int64     `json:"parentVersion,omitempty"`
	RestoredFrom  *int64     `json:"restoredFrom,omitempty"`
	Uid           *string    `json:"uid,omitempty"`
	Version       *int64     `json:"version,omitempty"`
}

// DataLink DataLink define what
type DataLink struct {
	// Internal InternalDataLink definition to allow Explore links to be constructed in the backend
	Internal    *InternalDataLink `json:"internal,omitempty"`
	TargetBlank *bool             `json:"targetBlank,omitempty"`
	Title       *string           `json:"title,omitempty"`
	Url         *string           `json:"url,omitempty"`
}

// DataResponse A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.
// The Error property is used to allow for partial success responses from the containing QueryDataResponse.
type DataResponse struct {
	// Error Error is a property to be set if the corresponding DataQuery has an error.
	Error *string `json:"Error,omitempty"`

	// ErrorSource ErrorSource type defines the source of the error
	ErrorSource *ErrorSource `json:"ErrorSource,omitempty"`

	// Frames It is the main data container within a backend.DataResponse.
	// There should be no `nil` entries in the Frames slice (making them pointers was a mistake).
	Frames *Frames `json:"Frames,omitempty"`
	Status *Status `json:"Status,omitempty"`
}

// DataSource defines model for DataSource.
type DataSource struct {
	Access *DsAccess `json:"access,omitempty"`

	// AccessControl Metadata contains user accesses for a given resource
	// Ex: map[string]bool{"create":true, "delete": true}
	AccessControl    *Metadata        `json:"accessControl,omitempty"`
	BasicAuth        *bool            `json:"basicAuth,omitempty"`
	BasicAuthUser    *string          `json:"basicAuthUser,omitempty"`
	Database         *string          `json:"database,omitempty"`
	Id               *int64           `json:"id,omitempty"`
	IsDefault        *bool            `json:"isDefault,omitempty"`
	JsonData         *Json            `json:"jsonData,omitempty"`
	Name             *string          `json:"name,omitempty"`
	OrgId            *int64           `json:"orgId,omitempty"`
	ReadOnly         *bool            `json:"readOnly,omitempty"`
	SecureJsonFields *map[string]bool `json:"secureJsonFields,omitempty"`
	Type             *string          `json:"type,omitempty"`
	TypeLogoUrl      *string          `json:"typeLogoUrl,omitempty"`
	Uid              *string          `json:"uid,omitempty"`
	Url              *string          `json:"url,omitempty"`
	User             *string          `json:"user,omitempty"`
	Version          *int64           `json:"version,omitempty"`
	WithCredentials  *bool            `json:"withCredentials,omitempty"`
}

// DataSourceList defines model for DataSourceList.
type DataSourceList = []DataSourceListItemDTO

// DataSourceListItemDTO defines model for DataSourceListItemDTO.
type DataSourceListItemDTO struct {
	Access      *DsAccess `json:"access,omitempty"`
	BasicAuth   *bool     `json:"basicAuth,omitempty"`
	Database    *string   `json:"database,omitempty"`
	Id          *int64    `json:"id,omitempty"`
	IsDefault   *bool     `json:"isDefault,omitempty"`
	JsonData    *Json     `json:"jsonData,omitempty"`
	Name        *string   `json:"name,omitempty"`
	OrgId       *int64    `json:"orgId,omitempty"`
	ReadOnly    *bool     `json:"readOnly,omitempty"`
	Type        *string   `json:"type,omitempty"`
	TypeLogoUrl *string   `json:"typeLogoUrl,omitempty"`
	TypeName    *string   `json:"typeName,omitempty"`
	Uid         *string   `json:"uid,omitempty"`
	Url         *string   `json:"url,omitempty"`
	User        *string   `json:"user,omitempty"`
}

// DataSourceRef Ref to a DataSource instance
type DataSourceRef struct {
	// Type The plugin type-id
	Type *string `json:"type,omitempty"`

	// Uid Specific datasource instance
	Uid *string `json:"uid,omitempty"`
}

// DataTopic nolint:revive
type DataTopic = string

// DeleteCorrelationResponseBody defines model for DeleteCorrelationResponseBody.
type DeleteCorrelationResponseBody struct {
	Message *string `json:"message,omitempty"`
}

// DeleteTokenCommand defines model for DeleteTokenCommand.
type DeleteTokenCommand struct {
	Instance *string `json:"instance,omitempty"`
}

// DescendantCounts defines model for DescendantCounts.
type DescendantCounts map[string]int64

// Description defines model for Description.
type Description struct {
	Assignments *Assignments `json:"assignments,omitempty"`
	Permissions *[]string    `json:"permissions,omitempty"`
}

// DsAccess defines model for DsAccess.
type DsAccess = string

// Duration A Duration represents the elapsed time between two instants
// as an int64 nanosecond count. The representation limits the
// largest representable duration to approximately 290 years.
type Duration = int64

// EmailDTO defines model for EmailDTO.
type EmailDTO struct {
	Recipient *string `json:"recipient,omitempty"`
	Uid       *string `json:"uid,omitempty"`
}

// EmbeddedContactPoint EmbeddedContactPoint is the contact point type that is used
// by grafanas embedded alertmanager implementation.
type EmbeddedContactPoint struct {
	DisableResolveMessage *bool `json:"disableResolveMessage,omitempty"`

	// Name Name is used as grouping key in the UI. Contact points with the
	// same name will be grouped in the UI.
	Name       *string                  `json:"name,omitempty"`
	Provenance *string                  `json:"provenance,omitempty"`
	Settings   Json                     `json:"settings"`
	Type       EmbeddedContactPointType `json:"type"`

	// Uid UID is the unique identifier of the contact point. The UID can be
	// set by the user.
	Uid *string `json:"uid,omitempty"`
}

// EmbeddedContactPointType defines model for EmbeddedContactPoint.Type.
type EmbeddedContactPointType string

// EnumFieldConfig Enum field config
// Vector values are used as lookup keys into the enum fields
type EnumFieldConfig struct {
	// Color Color is the color value for a given index (empty is undefined)
	Color *[]string `json:"color,omitempty"`

	// Description Description of the enum state
	Description *[]string `json:"description,omitempty"`

	// Icon Icon supports setting an icon for a given index value
	Icon *[]string `json:"icon,omitempty"`

	// Text Value is the string display value for a given index
	Text *[]string `json:"text,omitempty"`
}

// ErrorResponseBody defines model for ErrorResponseBody.
type ErrorResponseBody struct {
	// Error Error An optional detailed description of the actual error. Only included if running in developer mode.
	Error *string `json:"error,omitempty"`

	// Message a human readable version of the error
	Message string `json:"message"`

	// Status Status An optional status to denote the cause of the error.
	//
	// For example, a 412 Precondition Failed error may include additional information of why that error happened.
	Status *string `json:"status,omitempty"`
}

// ErrorSource ErrorSource type defines the source of the error
type ErrorSource = string

// EvalMatch defines model for EvalMatch.
type EvalMatch struct {
	Metric *string            `json:"metric,omitempty"`
	Tags   *map[string]string `json:"tags,omitempty"`
	Value  *string            `json:"value,omitempty"`
}

// ExplorePanelsState This is an object constructed with the keys as the values of the enum VisType and the value being a bag of properties
type ExplorePanelsState = interface{}

// ExtKeyUsage Each of the ExtKeyUsage* constants define a unique action.
type ExtKeyUsage = int64

// Extension Extension represents the ASN.1 structure of the same name. See RFC
// 5280, section 4.2.
type Extension struct {
	Critical *bool             `json:"Critical,omitempty"`
	Id       *ObjectIdentifier `json:"Id,omitempty"`
	Value    *[]uint8          `json:"Value,omitempty"`
}

// FailedUser FailedUser holds the information of an user that failed
type FailedUser struct {
	Error *string `json:"Error,omitempty"`
	Login *string `json:"Login,omitempty"`
}

// Field A Field is essentially a slice of various types with extra properties and methods.
// See NewField() for supported types.
//
// The slice data in the Field is a not exported, so methods on the Field are used to to manipulate its data.
type Field struct {
	Config *FieldConfig `json:"config,omitempty"`

	// Labels Labels are used to add metadata to an object.  The JSON will always be sorted keys
	Labels *FrameLabels `json:"labels,omitempty"`

	// Name Name is default identifier of the field. The name does not have to be unique, but the combination
	// of name and Labels should be unique for proper behavior in all situations.
	Name *string `json:"name,omitempty"`
}

// FieldConfig defines model for FieldConfig.
type FieldConfig struct {
	// Color Map values to a display color
	// NOTE: this interface is under development in the frontend... so simple map for now
	Color *map[string]interface{} `json:"color,omitempty"`

	// Custom Panel Specific Values
	Custom   *map[string]interface{} `json:"custom,omitempty"`
	Decimals *uint16                 `json:"decimals,omitempty"`

	// Description Description is human readable field metadata
	Description *string `json:"description,omitempty"`

	// DisplayName DisplayName overrides Grafana default naming, should not be used from a data source
	DisplayName *string `json:"displayName,omitempty"`

	// DisplayNameFromDS DisplayNameFromDS overrides Grafana default naming strategy.
	DisplayNameFromDS *string `json:"displayNameFromDS,omitempty"`

	// Filterable Filterable indicates if the Field's data can be filtered by additional calls.
	Filterable *bool `json:"filterable,omitempty"`

	// Interval Interval indicates the expected regular step between values in the series.
	// When an interval exists, consumers can identify "missing" values when the expected value is not present.
	// The grafana timeseries visualization will render disconnected values when missing values are found it the time field.
	// The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.
	Interval *float64 `json:"interval,omitempty"`

	// Links The behavior when clicking on a result
	Links    *[]DataLink    `json:"links,omitempty"`
	Mappings *ValueMappings `json:"mappings,omitempty"`

	// Max ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
	// to null.
	Max *ConfFloat64 `json:"max,omitempty"`

	// Min ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
	// to null.
	Min *ConfFloat64 `json:"min,omitempty"`

	// NoValue Alternative to empty string
	NoValue *string `json:"noValue,omitempty"`

	// Path Path is an explicit path to the field in the datasource. When the frame meta includes a path,
	// this will default to `${frame.meta.path}/${field.name}
	//
	// When defined, this value can be used as an identifier within the datasource scope, and
	// may be used as an identifier to update values in a subsequent request
	Path *string `json:"path,omitempty"`

	// Thresholds ThresholdsConfig setup thresholds
	Thresholds *ThresholdsConfig `json:"thresholds,omitempty"`

	// Type FieldTypeConfig has type specific configs, only one should be active at a time
	Type *FieldTypeConfig `json:"type,omitempty"`

	// Unit Numeric Options
	Unit *string `json:"unit,omitempty"`

	// Writeable Writeable indicates that the datasource knows how to update this value
	Writeable *bool `json:"writeable,omitempty"`
}

// FieldTypeConfig FieldTypeConfig has type specific configs, only one should be active at a time
type FieldTypeConfig struct {
	// Enum Enum field config
	// Vector values are used as lookup keys into the enum fields
	Enum *EnumFieldConfig `json:"enum,omitempty"`
}

// FindTagsResult defines model for FindTagsResult.
type FindTagsResult struct {
	Tags *[]TagsDTO `json:"tags,omitempty"`
}

// Folder defines model for Folder.
type Folder struct {
	// AccessControl Metadata contains user accesses for a given resource
	// Ex: map[string]bool{"create":true, "delete": true}
	AccessControl *Metadata  `json:"accessControl,omitempty"`
	CanAdmin      *bool      `json:"canAdmin,omitempty"`
	CanDelete     *bool      `json:"canDelete,omitempty"`
	CanEdit       *bool      `json:"canEdit,omitempty"`
	CanSave       *bool      `json:"canSave,omitempty"`
	Created       *time.Time `json:"created,omitempty"`
	CreatedBy     *string    `json:"createdBy,omitempty"`
	HasAcl        *bool      `json:"hasAcl,omitempty"`

	// Id Deprecated: use UID instead
	Id    *int64 `json:"id,omitempty"`
	OrgId *int64 `json:"orgId,omitempty"`

	// ParentUid only used if nested folders are enabled
	ParentUid *string `json:"parentUid,omitempty"`

	// Parents the parent folders starting from the root going down
	Parents   *[]Folder  `json:"parents,omitempty"`
	Title     *string    `json:"title,omitempty"`
	Uid       *string    `json:"uid,omitempty"`
	Updated   *time.Time `json:"updated,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
	Url       *string    `json:"url,omitempty"`
	Version   *int64     `json:"version,omitempty"`
}

// FolderSearchHit defines model for FolderSearchHit.
type FolderSearchHit struct {
	Id        *int64  `json:"id,omitempty"`
	ParentUid *string `json:"parentUid,omitempty"`
	Title     *string `json:"title,omitempty"`
	Uid       *string `json:"uid,omitempty"`
}

// Frame Each Field is well typed by its FieldType and supports optional Labels.
//
// A Frame is a general data container for Grafana. A Frame can be table data
// or time series data depending on its content and field types.
type Frame struct {
	// Fields Fields are the columns of a frame.
	// All Fields must be of the same the length when marshalling the Frame for transmission.
	// There should be no `nil` entries in the Fields slice (making them pointers was a mistake).
	Fields *[]Field `json:"Fields,omitempty"`

	// Meta https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11
	// NOTE -- in javascript this can accept any `[key: string]: any;` however
	// this interface only exposes the values we want to be exposed
	Meta *FrameMeta `json:"Meta,omitempty"`

	// Name Name is used in some Grafana visualizations.
	Name *string `json:"Name,omitempty"`

	// RefID RefID is a property that can be set to match a Frame to its originating query.
	RefID *string `json:"RefID,omitempty"`
}

// FrameLabels Labels are used to add metadata to an object.  The JSON will always be sorted keys
type FrameLabels map[string]string

// FrameMeta https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L11
// NOTE -- in javascript this can accept any `[key: string]: any;` however
// this interface only exposes the values we want to be exposed
type FrameMeta struct {
	// Channel Channel is the path to a stream in grafana live that has real-time updates for this data.
	Channel *string `json:"channel,omitempty"`

	// Custom Custom datasource specific values.
	Custom *interface{} `json:"custom,omitempty"`

	// DataTopic nolint:revive
	DataTopic *DataTopic `json:"dataTopic,omitempty"`

	// ExecutedQueryString ExecutedQueryString is the raw query sent to the underlying system. All macros and templating
	// have been applied.  When metadata contains this value, it will be shown in the query inspector.
	ExecutedQueryString *string `json:"executedQueryString,omitempty"`

	// Notices Notices provide additional information about the data in the Frame that
	// Grafana can display to the user in the user interface.
	Notices *[]Notice `json:"notices,omitempty"`

	// Path Path is a browsable path on the datasource.
	Path *string `json:"path,omitempty"`

	// PathSeparator PathSeparator defines the separator pattern to decode a hierarchy. The default separator is '/'.
	PathSeparator *string `json:"pathSeparator,omitempty"`

	// PreferredVisualisationPluginId PreferredVisualizationPluginId sets the panel plugin id to use to render the data when using Explore. If
	// the plugin cannot be found will fall back to PreferredVisualization.
	PreferredVisualisationPluginId *string  `json:"preferredVisualisationPluginId,omitempty"`
	PreferredVisualisationType     *VisType `json:"preferredVisualisationType,omitempty"`

	// Stats Stats is an array of query result statistics.
	Stats *[]QueryStat `json:"stats,omitempty"`

	// Type A FrameType string, when present in a frame's metadata, asserts that the
	// frame's structure conforms to the FrameType's specification.
	// This property is currently optional, so FrameType may be FrameTypeUnknown even if the properties of
	// the Frame correspond to a defined FrameType.
	Type        *FrameType        `json:"type,omitempty"`
	TypeVersion *FrameTypeVersion `json:"typeVersion,omitempty"`
}

// FrameType A FrameType string, when present in a frame's metadata, asserts that the
// frame's structure conforms to the FrameType's specification.
// This property is currently optional, so FrameType may be FrameTypeUnknown even if the properties of
// the Frame correspond to a defined FrameType.
type FrameType = string

// FrameTypeVersion defines model for FrameTypeVersion.
type FrameTypeVersion = []uint64

// Frames It is the main data container within a backend.DataResponse.
// There should be no `nil` entries in the Frames slice (making them pointers was a mistake).
type Frames = []Frame

// GetAnnotationTagsResponse defines model for GetAnnotationTagsResponse.
type GetAnnotationTagsResponse struct {
	Result *FindTagsResult `json:"result,omitempty"`
}

// GetHomeDashboardResponse defines model for GetHomeDashboardResponse.
type GetHomeDashboardResponse struct {
	Dashboard   *Json          `json:"dashboard,omitempty"`
	Meta        *DashboardMeta `json:"meta,omitempty"`
	RedirectUri *string        `json:"redirectUri,omitempty"`
}

// Hit defines model for Hit.
type Hit struct {
	// FolderId Deprecated: use FolderUID instead
	FolderId     *int64    `json:"folderId,omitempty"`
	FolderTitle  *string   `json:"folderTitle,omitempty"`
	FolderUid    *string   `json:"folderUid,omitempty"`
	FolderUrl    *string   `json:"folderUrl,omitempty"`
	Id           *int64    `json:"id,omitempty"`
	IsStarred    *bool     `json:"isStarred,omitempty"`
	Slug         *string   `json:"slug,omitempty"`
	SortMeta     *int64    `json:"sortMeta,omitempty"`
	SortMetaName *string   `json:"sortMetaName,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Type         *HitType  `json:"type,omitempty"`
	Uid          *string   `json:"uid,omitempty"`
	Uri          *string   `json:"uri,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// HitList defines model for HitList.
type HitList = []Hit

// HitType defines model for HitType.
type HitType = string

// IPMask See type IPNet and func ParseCIDR for details.
type IPMask = []uint8

// IPNet defines model for IPNet.
type IPNet struct {
	IP *string `json:"IP,omitempty"`

	// Mask See type IPNet and func ParseCIDR for details.
	Mask *IPMask `json:"Mask,omitempty"`
}

// ImportDashboardInput defines model for ImportDashboardInput.
type ImportDashboardInput struct {
	Name     *string `json:"name,omitempty"`
	PluginId *string `json:"pluginId,omitempty"`
	Type     *string `json:"type,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// ImportDashboardRequest defines model for ImportDashboardRequest.
type ImportDashboardRequest struct {
	Dashboard *Json `json:"dashboard,omitempty"`

	// FolderId Deprecated: use FolderUID instead
	FolderId  *int64                  `json:"folderId,omitempty"`
	FolderUid *string                 `json:"folderUid,omitempty"`
	Inputs    *[]ImportDashboardInput `json:"inputs,omitempty"`
	Overwrite *bool                   `json:"overwrite,omitempty"`
	Path      *string                 `json:"path,omitempty"`
	PluginId  *string                 `json:"pluginId,omitempty"`
}

// ImportDashboardResponse defines model for ImportDashboardResponse.
type ImportDashboardResponse struct {
	DashboardId *int64  `json:"dashboardId,omitempty"`
	Description *string `json:"description,omitempty"`

	// FolderId Deprecated: use FolderUID instead
	FolderId         *int64  `json:"folderId,omitempty"`
	FolderUid        *string `json:"folderUid,omitempty"`
	Imported         *bool   `json:"imported,omitempty"`
	ImportedRevision *int64  `json:"importedRevision,omitempty"`
	ImportedUri      *string `json:"importedUri,omitempty"`
	ImportedUrl      *string `json:"importedUrl,omitempty"`
	Path             *string `json:"path,omitempty"`
	PluginId         *string `json:"pluginId,omitempty"`
	Removed          *bool   `json:"removed,omitempty"`
	Revision         *int64  `json:"revision,omitempty"`
	Slug             *string `json:"slug,omitempty"`
	Title            *string `json:"title,omitempty"`
	Uid              *string `json:"uid,omitempty"`
}

// InspectType defines model for InspectType.
type InspectType = int64

// InternalDataLink InternalDataLink definition to allow Explore links to be constructed in the backend
type InternalDataLink struct {
	DatasourceName *string `json:"datasourceName,omitempty"`
	DatasourceUid  *string `json:"datasourceUid,omitempty"`

	// PanelsState This is an object constructed with the keys as the values of the enum VisType and the value being a bag of properties
	PanelsState *ExplorePanelsState `json:"panelsState,omitempty"`
	Query       *interface{}        `json:"query,omitempty"`

	// TimeRange Redefining this to avoid an import cycle
	TimeRange       *TimeRange                  `json:"timeRange,omitempty"`
	Transformations *[]LinkTransformationConfig `json:"transformations,omitempty"`
}

// JSONWebKey defines model for JSONWebKey.
type JSONWebKey struct {
	// Algorithm Key algorithm, parsed from `alg` header.
	Algorithm *string `json:"Algorithm,omitempty"`

	// CertificateThumbprintSHA1 X.509 certificate thumbprint (SHA-1), parsed from `x5t` header.
	CertificateThumbprintSHA1 *[]uint8 `json:"CertificateThumbprintSHA1,omitempty"`

	// CertificateThumbprintSHA256 X.509 certificate thumbprint (SHA-256), parsed from `x5t#S256` header.
	CertificateThumbprintSHA256 *[]uint8 `json:"CertificateThumbprintSHA256,omitempty"`

	// Certificates X.509 certificate chain, parsed from `x5c` header.
	Certificates *[]Certificate `json:"Certificates,omitempty"`

	// CertificatesURL The general form represented is:
	//
	// [scheme:][//[userinfo@]host][/]path[?query][#fragment]
	//
	// URLs that do not start with a slash after the scheme are interpreted as:
	//
	// scheme:opaque[?query][#fragment]
	//
	// Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.
	// A consequence is that it is impossible to tell which slashes in the Path were
	// slashes in the raw URL and which were %2f. This distinction is rarely important,
	// but when it is, the code should use the EscapedPath method, which preserves
	// the original encoding of Path.
	//
	// The RawPath field is an optional field which is only set when the default
	// encoding of Path is different from the escaped path. See the EscapedPath method
	// for more details.
	//
	// URL's String method uses the EscapedPath method to obtain the path.
	CertificatesURL *URL `json:"CertificatesURL,omitempty"`

	// Key Cryptographic key, can be a symmetric or asymmetric key.
	Key *interface{} `json:"Key,omitempty"`

	// KeyID Key identifier, parsed from `kid` header.
	KeyID *string `json:"KeyID,omitempty"`

	// Use Key use, parsed from `use` header.
	Use *string `json:"Use,omitempty"`
}

// Json defines model for Json.
type Json = map[string]interface{}

// KeyUsage KeyUsage represents the set of actions that are valid for a given key. It's
// a bitmap of the KeyUsage* constants.
type KeyUsage = int64

// LegacyAlert defines model for LegacyAlert.
type LegacyAlert struct {
	Created        *time.Time `json:"Created,omitempty"`
	DashboardID    *int64     `json:"DashboardID,omitempty"`
	EvalData       *Json      `json:"EvalData,omitempty"`
	ExecutionError *string    `json:"ExecutionError,omitempty"`

	// For A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	For          *Duration       `json:"For,omitempty"`
	Frequency    *int64          `json:"Frequency,omitempty"`
	Handler      *int64          `json:"Handler,omitempty"`
	ID           *int64          `json:"ID,omitempty"`
	Message      *string         `json:"Message,omitempty"`
	Name         *string         `json:"Name,omitempty"`
	NewStateDate *time.Time      `json:"NewStateDate,omitempty"`
	OrgID        *int64          `json:"OrgID,omitempty"`
	PanelID      *int64          `json:"PanelID,omitempty"`
	Settings     *Json           `json:"Settings,omitempty"`
	Severity     *string         `json:"Severity,omitempty"`
	Silenced     *bool           `json:"Silenced,omitempty"`
	State        *AlertStateType `json:"State,omitempty"`
	StateChanges *int64          `json:"StateChanges,omitempty"`
	Updated      *time.Time      `json:"Updated,omitempty"`
	Version      *int64          `json:"Version,omitempty"`
}

// LibraryElementArrayResponse defines model for LibraryElementArrayResponse.
type LibraryElementArrayResponse struct {
	Result *[]LibraryElementDTO `json:"result,omitempty"`
}

// LibraryElementConnectionDTO defines model for LibraryElementConnectionDTO.
type LibraryElementConnectionDTO struct {
	ConnectionId  *int64                     `json:"connectionId,omitempty"`
	ConnectionUid *string                    `json:"connectionUid,omitempty"`
	Created       *time.Time                 `json:"created,omitempty"`
	CreatedBy     *LibraryElementDTOMetaUser `json:"createdBy,omitempty"`
	ElementId     *int64                     `json:"elementId,omitempty"`
	Id            *int64                     `json:"id,omitempty"`
	Kind          *int64                     `json:"kind,omitempty"`
}

// LibraryElementConnectionsResponse defines model for LibraryElementConnectionsResponse.
type LibraryElementConnectionsResponse struct {
	Result *[]LibraryElementConnectionDTO `json:"result,omitempty"`
}

// LibraryElementDTO defines model for LibraryElementDTO.
type LibraryElementDTO struct {
	Description *string `json:"description,omitempty"`

	// FolderId Deprecated: use FolderUID instead
	FolderId      *int64                  `json:"folderId,omitempty"`
	FolderUid     *string                 `json:"folderUid,omitempty"`
	Id            *int64                  `json:"id,omitempty"`
	Kind          *int64                  `json:"kind,omitempty"`
	Meta          *LibraryElementDTOMeta  `json:"meta,omitempty"`
	Model         *map[string]interface{} `json:"model,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	OrgId         *int64                  `json:"orgId,omitempty"`
	SchemaVersion *int64                  `json:"schemaVersion,omitempty"`
	Type          *string                 `json:"type,omitempty"`
	Uid           *string                 `json:"uid,omitempty"`
	Version       *int64                  `json:"version,omitempty"`
}

// LibraryElementDTOMeta defines model for LibraryElementDTOMeta.
type LibraryElementDTOMeta struct {
	ConnectedDashboards *int64                     `json:"connectedDashboards,omitempty"`
	Created             *time.Time                 `json:"created,omitempty"`
	CreatedBy           *LibraryElementDTOMetaUser `json:"createdBy,omitempty"`
	FolderName          *string                    `json:"folderName,omitempty"`
	FolderUid           *string                    `json:"folderUid,omitempty"`
	Updated             *time.Time                 `json:"updated,omitempty"`
	UpdatedBy           *LibraryElementDTOMetaUser `json:"updatedBy,omitempty"`
}

// LibraryElementDTOMetaUser defines model for LibraryElementDTOMetaUser.
type LibraryElementDTOMetaUser struct {
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// LibraryElementResponse defines model for LibraryElementResponse.
type LibraryElementResponse struct {
	Result *LibraryElementDTO `json:"result,omitempty"`
}

// LibraryElementSearchResponse defines model for LibraryElementSearchResponse.
type LibraryElementSearchResponse struct {
	Result *LibraryElementSearchResult `json:"result,omitempty"`
}

// LibraryElementSearchResult defines model for LibraryElementSearchResult.
type LibraryElementSearchResult struct {
	Elements   *[]LibraryElementDTO `json:"elements,omitempty"`
	Page       *int64               `json:"page,omitempty"`
	PerPage    *int64               `json:"perPage,omitempty"`
	TotalCount *int64               `json:"totalCount,omitempty"`
}

// LinkTransformationConfig defines model for LinkTransformationConfig.
type LinkTransformationConfig struct {
	Expression *string                       `json:"expression,omitempty"`
	Field      *string                       `json:"field,omitempty"`
	MapValue   *string                       `json:"mapValue,omitempty"`
	Type       *SupportedTransformationTypes `json:"type,omitempty"`
}

// MassDeleteAnnotationsCmd defines model for MassDeleteAnnotationsCmd.
type MassDeleteAnnotationsCmd struct {
	AnnotationId *int64  `json:"annotationId,omitempty"`
	DashboardId  *int64  `json:"dashboardId,omitempty"`
	DashboardUID *string `json:"dashboardUID,omitempty"`
	PanelId      *int64  `json:"panelId,omitempty"`
}

// MatchRegexps defines model for MatchRegexps.
type MatchRegexps map[string]string

// MatchType defines model for MatchType.
type MatchType = int64

// Matcher defines model for Matcher.
type Matcher struct {
	Name  *string    `json:"Name,omitempty"`
	Type  *MatchType `json:"Type,omitempty"`
	Value *string    `json:"Value,omitempty"`
}

// Matchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
// provides a Matches method to match a LabelSet against all Matchers in the
// slice. Note that some users of Matchers might require it to be sorted.
type Matchers = []Matcher

// Metadata Metadata contains user accesses for a given resource
// Ex: map[string]bool{"create":true, "delete": true}
type Metadata map[string]bool

// MetricRequest defines model for MetricRequest.
type MetricRequest struct {
	Debug *bool `json:"debug,omitempty"`

	// From From Start time in epoch timestamps in milliseconds or relative using Grafana time units.
	From string `json:"from"`

	// Queries queries.refId – Specifies an identifier of the query. Is optional and default to “A”.
	// queries.datasourceId – Specifies the data source to be queried. Each query in the request must have an unique datasourceId.
	// queries.maxDataPoints - Species maximum amount of data points that dashboard panel can render. Is optional and default to 100.
	// queries.intervalMs - Specifies the time interval in milliseconds of time series. Is optional and defaults to 1000.
	Queries []Json `json:"queries"`

	// To To End time in epoch timestamps in milliseconds or relative using Grafana time units.
	To string `json:"to"`
}

// MoveFolderCommand MoveFolderCommand captures the information required by the folder service
// to move a folder.
type MoveFolderCommand struct {
	ParentUid *string `json:"parentUid,omitempty"`
}

// MuteTimeInterval defines model for MuteTimeInterval.
type MuteTimeInterval struct {
	Name          *string         `json:"name,omitempty"`
	TimeIntervals *[]TimeInterval `json:"time_intervals,omitempty"`
}

// MuteTimeIntervalExport defines model for MuteTimeIntervalExport.
type MuteTimeIntervalExport struct {
	Name          *string         `json:"name,omitempty"`
	OrgId         *int64          `json:"orgId,omitempty"`
	TimeIntervals *[]TimeInterval `json:"time_intervals,omitempty"`
}

// MuteTimings defines model for MuteTimings.
type MuteTimings = []MuteTimeInterval

// Name Name represents an X.509 distinguished name. This only includes the common
// elements of a DN. Note that Name is only an approximation of the X.509
// structure. If an accurate representation is needed, asn1.Unmarshal the raw
// subject or issuer as an RDNSequence.
type Name struct {
	Country *[]string `json:"Country,omitempty"`

	// ExtraNames ExtraNames contains attributes to be copied, raw, into any marshaled
	// distinguished names. Values override any attributes with the same OID.
	// The ExtraNames field is not populated when parsing, see Names.
	ExtraNames *[]AttributeTypeAndValue `json:"ExtraNames,omitempty"`
	Locality   *[]string                `json:"Locality,omitempty"`

	// Names Names contains all parsed attributes. When parsing distinguished names,
	// this can be used to extract non-standard attributes that are not parsed
	// by this package. When marshaling to RDNSequences, the Names field is
	// ignored, see ExtraNames.
	Names         *[]AttributeTypeAndValue `json:"Names,omitempty"`
	SerialNumber  *string                  `json:"SerialNumber,omitempty"`
	StreetAddress *[]string                `json:"StreetAddress,omitempty"`
}

// NewApiKeyResult defines model for NewApiKeyResult.
type NewApiKeyResult struct {
	Id   *int64  `json:"id,omitempty"`
	Key  *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound = map[string]interface{}

// Notice defines model for Notice.
type Notice struct {
	Inspect *InspectType `json:"inspect,omitempty"`

	// Link Link is an optional link for display in the user interface and can be an
	// absolute URL or a path relative to Grafana's root url.
	Link     *string         `json:"link,omitempty"`
	Severity *NoticeSeverity `json:"severity,omitempty"`

	// Text Text is freeform descriptive text for the notice.
	Text *string `json:"text,omitempty"`
}

// NoticeSeverity defines model for NoticeSeverity.
type NoticeSeverity = int64

// NotificationPolicyExport defines model for NotificationPolicyExport.
type NotificationPolicyExport struct {
	Continue      *bool     `json:"continue,omitempty"`
	GroupBy       *[]string `json:"group_by,omitempty"`
	GroupInterval *string   `json:"group_interval,omitempty"`
	GroupWait     *string   `json:"group_wait,omitempty"`

	// Match Deprecated. Remove before v1.0 release.
	Match   *map[string]string `json:"match,omitempty"`
	MatchRe *MatchRegexps      `json:"match_re,omitempty"`

	// Matchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
	// provides a Matches method to match a LabelSet against all Matchers in the
	// slice. Note that some users of Matchers might require it to be sorted.
	Matchers          *Matchers `json:"matchers,omitempty"`
	MuteTimeIntervals *[]string `json:"mute_time_intervals,omitempty"`

	// ObjectMatchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
	// provides a Matches method to match a LabelSet against all Matchers in the
	// slice. Note that some users of Matchers might require it to be sorted.
	ObjectMatchers *ObjectMatchers `json:"object_matchers,omitempty"`
	OrgId          *int64          `json:"orgId,omitempty"`
	Receiver       *string         `json:"receiver,omitempty"`
	RepeatInterval *string         `json:"repeat_interval,omitempty"`
	Routes         *[]RouteExport  `json:"routes,omitempty"`
}

// NotificationTemplate defines model for NotificationTemplate.
type NotificationTemplate struct {
	Name       *string     `json:"name,omitempty"`
	Provenance *Provenance `json:"provenance,omitempty"`
	Template   *string     `json:"template,omitempty"`
}

// NotificationTemplateContent defines model for NotificationTemplateContent.
type NotificationTemplateContent struct {
	Template *string `json:"template,omitempty"`
}

// NotificationTemplates defines model for NotificationTemplates.
type NotificationTemplates = []NotificationTemplate

// NotificationTestCommand defines model for NotificationTestCommand.
type NotificationTestCommand struct {
	DisableResolveMessage *bool              `json:"disableResolveMessage,omitempty"`
	Frequency             *string            `json:"frequency,omitempty"`
	Id                    *int64             `json:"id,omitempty"`
	Name                  *string            `json:"name,omitempty"`
	SecureSettings        *map[string]string `json:"secureSettings,omitempty"`
	SendReminder          *bool              `json:"sendReminder,omitempty"`
	Settings              *Json              `json:"settings,omitempty"`
	Type                  *string            `json:"type,omitempty"`
}

// ObjectIdentifier defines model for ObjectIdentifier.
type ObjectIdentifier = []int64

// ObjectMatchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
// provides a Matches method to match a LabelSet against all Matchers in the
// slice. Note that some users of Matchers might require it to be sorted.
type ObjectMatchers = Matchers

// OrgDTO defines model for OrgDTO.
type OrgDTO struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// OrgDetailsDTO defines model for OrgDetailsDTO.
type OrgDetailsDTO struct {
	Address *Address `json:"address,omitempty"`
	Id      *int64   `json:"id,omitempty"`
	Name    *string  `json:"name,omitempty"`
}

// OrgUserDTO defines model for OrgUserDTO.
type OrgUserDTO struct {
	AccessControl      *map[string]bool `json:"accessControl,omitempty"`
	AuthLabels         *[]string        `json:"authLabels,omitempty"`
	AvatarUrl          *string          `json:"avatarUrl,omitempty"`
	Email              *string          `json:"email,omitempty"`
	IsDisabled         *bool            `json:"isDisabled,omitempty"`
	IsExternallySynced *bool            `json:"isExternallySynced,omitempty"`
	LastSeenAt         *time.Time       `json:"lastSeenAt,omitempty"`
	LastSeenAtAge      *string          `json:"lastSeenAtAge,omitempty"`
	Login              *string          `json:"login,omitempty"`
	Name               *string          `json:"name,omitempty"`
	OrgId              *int64           `json:"orgId,omitempty"`
	Role               *string          `json:"role,omitempty"`
	UserId             *int64           `json:"userId,omitempty"`
}

// PatchAnnotationsCmd defines model for PatchAnnotationsCmd.
type PatchAnnotationsCmd struct {
	Data    *Json     `json:"data,omitempty"`
	Id      *int64    `json:"id,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Text    *string   `json:"text,omitempty"`
	Time    *int64    `json:"time,omitempty"`
	TimeEnd *int64    `json:"timeEnd,omitempty"`
}

// PatchLibraryElementCommand PatchLibraryElementCommand is the command for patching a LibraryElement
type PatchLibraryElementCommand struct {
	// FolderId ID of the folder where the library element is stored.
	//
	// Deprecated: use FolderUID instead
	FolderId *int64 `json:"folderId,omitempty"`

	// FolderUid UID of the folder where the library element is stored.
	FolderUid *string `json:"folderUid,omitempty"`

	// Kind Kind of element to create, Use 1 for library panels or 2 for c.
	// Description:
	// 1 - library panels
	// 2 - library variables
	Kind *PatchLibraryElementCommandKind `json:"kind,omitempty"`

	// Model The JSON model for the library element.
	Model *map[string]interface{} `json:"model,omitempty"`

	// Name Name of the library element.
	Name *string `json:"name,omitempty"`
	Uid  *string `json:"uid,omitempty"`

	// Version Version of the library element you are updating.
	Version *int64 `json:"version,omitempty"`
}

// PatchLibraryElementCommandKind Kind of element to create, Use 1 for library panels or 2 for c.
// Description:
// 1 - library panels
// 2 - library variables
type PatchLibraryElementCommandKind int64

// PatchPrefsCmd defines model for PatchPrefsCmd.
type PatchPrefsCmd struct {
	Cookies *[]CookieType `json:"cookies,omitempty"`

	// HomeDashboardId The numerical :id of a favorited dashboard
	HomeDashboardId  *int64                  `json:"homeDashboardId,omitempty"`
	HomeDashboardUID *string                 `json:"homeDashboardUID,omitempty"`
	Language         *string                 `json:"language,omitempty"`
	QueryHistory     *QueryHistoryPreference `json:"queryHistory,omitempty"`
	Theme            *PatchPrefsCmdTheme     `json:"theme,omitempty"`
	Timezone         *PatchPrefsCmdTimezone  `json:"timezone,omitempty"`
	WeekStart        *string                 `json:"weekStart,omitempty"`
}

// PatchPrefsCmdTheme defines model for PatchPrefsCmd.Theme.
type PatchPrefsCmdTheme string

// PatchPrefsCmdTimezone defines model for PatchPrefsCmd.Timezone.
type PatchPrefsCmdTimezone string

// PatchQueryCommentInQueryHistoryCommand PatchQueryCommentInQueryHistoryCommand is the command for updating comment for query in query history
type PatchQueryCommentInQueryHistoryCommand struct {
	// Comment Updated comment
	Comment *string `json:"comment,omitempty"`
}

// PauseAlertCommand defines model for PauseAlertCommand.
type PauseAlertCommand struct {
	AlertId *int64 `json:"alertId,omitempty"`
	Paused  *bool  `json:"paused,omitempty"`
}

// PauseAllAlertsCommand defines model for PauseAllAlertsCommand.
type PauseAllAlertsCommand struct {
	Paused *bool `json:"paused,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Action  *string    `json:"action,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Scope   *string    `json:"scope,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied = map[string]interface{}

// PermissionType defines model for PermissionType.
type PermissionType = int64

// Playlist Playlist model
type Playlist struct {
	Id       *int64  `json:"id,omitempty"`
	Interval *string `json:"interval,omitempty"`
	Name     *string `json:"name,omitempty"`
	Uid      *string `json:"uid,omitempty"`
}

// PlaylistDTO defines model for PlaylistDTO.
type PlaylistDTO struct {
	// Interval Interval sets the time between switching views in a playlist.
	Interval *string `json:"interval,omitempty"`

	// Items The ordered list of items that the playlist will iterate over.
	Items *[]PlaylistItemDTO `json:"items,omitempty"`

	// Name Name of the playlist.
	Name *string `json:"name,omitempty"`

	// Uid Unique playlist identifier. Generated on creation, either by the
	// creator of the playlist of by the application.
	Uid *string `json:"uid,omitempty"`
}

// PlaylistItem defines model for PlaylistItem.
type PlaylistItem struct {
	Id         *int64  `json:"Id,omitempty"`
	PlaylistId *int64  `json:"PlaylistId,omitempty"`
	Order      *int64  `json:"order,omitempty"`
	Title      *string `json:"title,omitempty"`
	Type       *string `json:"type,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// PlaylistItemDTO defines model for PlaylistItemDTO.
type PlaylistItemDTO struct {
	// Title Title is an unused property -- it will be removed in the future
	Title *string `json:"title,omitempty"`

	// Type Type of the item.
	Type *string `json:"type,omitempty"`

	// Value Value depends on type and describes the playlist item.
	//
	// dashboard_by_id: The value is an internal numerical identifier set by Grafana. This
	// is not portable as the numerical identifier is non-deterministic between different instances.
	// Will be replaced by dashboard_by_uid in the future. (deprecated)
	// dashboard_by_tag: The value is a tag which is set on any number of dashboards. All
	// dashboards behind the tag will be added to the playlist.
	// dashboard_by_uid: The value is the dashboard UID
	Value *string `json:"value,omitempty"`
}

// Playlists defines model for Playlists.
type Playlists = []Playlist

// PostAnnotationsCmd defines model for PostAnnotationsCmd.
type PostAnnotationsCmd struct {
	DashboardId  *int64    `json:"dashboardId,omitempty"`
	DashboardUID *string   `json:"dashboardUID,omitempty"`
	Data         *Json     `json:"data,omitempty"`
	PanelId      *int64    `json:"panelId,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	Text         string    `json:"text"`
	Time         *int64    `json:"time,omitempty"`
	TimeEnd      *int64    `json:"timeEnd,omitempty"`
}

// PostGraphiteAnnotationsCmd defines model for PostGraphiteAnnotationsCmd.
type PostGraphiteAnnotationsCmd struct {
	Data *string      `json:"data,omitempty"`
	Tags *interface{} `json:"tags,omitempty"`
	What *string      `json:"what,omitempty"`
	When *int64       `json:"when,omitempty"`
}

// Preferences Spec defines user, team or org Grafana preferences
type Preferences struct {
	CookiePreferences *CookiePreferences `json:"cookiePreferences,omitempty"`

	// HomeDashboardUID UID for the home dashboard
	HomeDashboardUID *string `json:"homeDashboardUID,omitempty"`

	// Language Selected language (beta)
	Language     *string                 `json:"language,omitempty"`
	QueryHistory *QueryHistoryPreference `json:"queryHistory,omitempty"`

	// Theme Theme light, dark, empty is default
	Theme *string `json:"theme,omitempty"`

	// Timezone The timezone selection
	// TODO: this should use the timezone defined in common
	Timezone *string `json:"timezone,omitempty"`

	// WeekStart WeekStart day of the week (sunday, monday, etc)
	WeekStart *string `json:"weekStart,omitempty"`
}

// PrometheusRemoteWriteTargetJSON defines model for PrometheusRemoteWriteTargetJSON.
type PrometheusRemoteWriteTargetJSON struct {
	DataSourceUid   *string `json:"data_source_uid,omitempty"`
	Id              *string `json:"id,omitempty"`
	RemoteWritePath *string `json:"remote_write_path,omitempty"`
}

// Provenance defines model for Provenance.
type Provenance = string

// ProvisionedAlertRule defines model for ProvisionedAlertRule.
type ProvisionedAlertRule struct {
	Annotations  *map[string]string               `json:"annotations,omitempty"`
	Condition    string                           `json:"condition"`
	Data         []AlertQuery                     `json:"data"`
	ExecErrState ProvisionedAlertRuleExecErrState `json:"execErrState"`
	FolderUID    string                           `json:"folderUID"`

	// For A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	For         Duration                        `json:"for"`
	Id          *int64                          `json:"id,omitempty"`
	IsPaused    *bool                           `json:"isPaused,omitempty"`
	Labels      *map[string]string              `json:"labels,omitempty"`
	NoDataState ProvisionedAlertRuleNoDataState `json:"noDataState"`
	OrgID       int64                           `json:"orgID"`
	Provenance  *Provenance                     `json:"provenance,omitempty"`
	RuleGroup   string                          `json:"ruleGroup"`
	Title       string                          `json:"title"`
	Uid         *string                         `json:"uid,omitempty"`
	Updated     *time.Time                      `json:"updated,omitempty"`
}

// ProvisionedAlertRuleExecErrState defines model for ProvisionedAlertRule.ExecErrState.
type ProvisionedAlertRuleExecErrState string

// ProvisionedAlertRuleNoDataState defines model for ProvisionedAlertRule.NoDataState.
type ProvisionedAlertRuleNoDataState string

// ProvisionedAlertRules defines model for ProvisionedAlertRules.
type ProvisionedAlertRules = []ProvisionedAlertRule

// PublicDashboard defines model for PublicDashboard.
type PublicDashboard struct {
	AccessToken          *string     `json:"accessToken,omitempty"`
	AnnotationsEnabled   *bool       `json:"annotationsEnabled,omitempty"`
	CreatedAt            *time.Time  `json:"createdAt,omitempty"`
	CreatedBy            *int64      `json:"createdBy,omitempty"`
	DashboardUid         *string     `json:"dashboardUid,omitempty"`
	IsEnabled            *bool       `json:"isEnabled,omitempty"`
	Recipients           *[]EmailDTO `json:"recipients,omitempty"`
	Share                *ShareType  `json:"share,omitempty"`
	TimeSelectionEnabled *bool       `json:"timeSelectionEnabled,omitempty"`
	Uid                  *string     `json:"uid,omitempty"`
	UpdatedAt            *time.Time  `json:"updatedAt,omitempty"`
	UpdatedBy            *int64      `json:"updatedBy,omitempty"`
}

// PublicDashboardDTO defines model for PublicDashboardDTO.
type PublicDashboardDTO struct {
	AccessToken          *string    `json:"accessToken,omitempty"`
	AnnotationsEnabled   *bool      `json:"annotationsEnabled,omitempty"`
	IsEnabled            *bool      `json:"isEnabled,omitempty"`
	Share                *ShareType `json:"share,omitempty"`
	TimeSelectionEnabled *bool      `json:"timeSelectionEnabled,omitempty"`
	Uid                  *string    `json:"uid,omitempty"`
}

// PublicDashboardListResponse defines model for PublicDashboardListResponse.
type PublicDashboardListResponse struct {
	AccessToken  *string `json:"accessToken,omitempty"`
	DashboardUid *string `json:"dashboardUid,omitempty"`
	IsEnabled    *bool   `json:"isEnabled,omitempty"`
	Slug         *string `json:"slug,omitempty"`
	Title        *string `json:"title,omitempty"`
	Uid          *string `json:"uid,omitempty"`
}

// PublicDashboardListResponseWithPagination defines model for PublicDashboardListResponseWithPagination.
type PublicDashboardListResponseWithPagination struct {
	Page             *int64                         `json:"page,omitempty"`
	PerPage          *int64                         `json:"perPage,omitempty"`
	PublicDashboards *[]PublicDashboardListResponse `json:"publicDashboards,omitempty"`
	TotalCount       *int64                         `json:"totalCount,omitempty"`
}

// PublicKeyAlgorithm defines model for PublicKeyAlgorithm.
type PublicKeyAlgorithm = int64

// QueryDataResponse It is the return type of a QueryData call.
type QueryDataResponse struct {
	// Responses The QueryData method the QueryDataHandler method will set the RefId
	// property on the DataResponses' frames based on these RefIDs.
	Responses *Responses `json:"Responses,omitempty"`
}

// QueryHistoryDTO defines model for QueryHistoryDTO.
type QueryHistoryDTO struct {
	Comment       *string `json:"comment,omitempty"`
	CreatedAt     *int64  `json:"createdAt,omitempty"`
	CreatedBy     *int64  `json:"createdBy,omitempty"`
	DatasourceUid *string `json:"datasourceUid,omitempty"`
	Queries       *Json   `json:"queries,omitempty"`
	Starred       *bool   `json:"starred,omitempty"`
	Uid           *string `json:"uid,omitempty"`
}

// QueryHistoryDeleteQueryResponse QueryHistoryDeleteQueryResponse is the response struct for deleting a query from query history
type QueryHistoryDeleteQueryResponse struct {
	Id      *int64  `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// QueryHistoryPreference defines model for QueryHistoryPreference.
type QueryHistoryPreference struct {
	// HomeTab HomeTab one of: '' | 'query' | 'starred';
	HomeTab *string `json:"homeTab,omitempty"`
}

// QueryHistoryResponse QueryHistoryResponse is a response struct for QueryHistoryDTO
type QueryHistoryResponse struct {
	Result *QueryHistoryDTO `json:"result,omitempty"`
}

// QueryHistorySearchResponse defines model for QueryHistorySearchResponse.
type QueryHistorySearchResponse struct {
	Result *QueryHistorySearchResult `json:"result,omitempty"`
}

// QueryHistorySearchResult defines model for QueryHistorySearchResult.
type QueryHistorySearchResult struct {
	Page         *int64             `json:"page,omitempty"`
	PerPage      *int64             `json:"perPage,omitempty"`
	QueryHistory *[]QueryHistoryDTO `json:"queryHistory,omitempty"`
	TotalCount   *int64             `json:"totalCount,omitempty"`
}

// QueryStat The embedded FieldConfig's display name must be set.
// It corresponds to the QueryResultMetaStat on the frontend (https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L53).
type QueryStat struct {
	// Color Map values to a display color
	// NOTE: this interface is under development in the frontend... so simple map for now
	Color *map[string]interface{} `json:"color,omitempty"`

	// Custom Panel Specific Values
	Custom   *map[string]interface{} `json:"custom,omitempty"`
	Decimals *uint16                 `json:"decimals,omitempty"`

	// Description Description is human readable field metadata
	Description *string `json:"description,omitempty"`

	// DisplayName DisplayName overrides Grafana default naming, should not be used from a data source
	DisplayName *string `json:"displayName,omitempty"`

	// DisplayNameFromDS DisplayNameFromDS overrides Grafana default naming strategy.
	DisplayNameFromDS *string `json:"displayNameFromDS,omitempty"`

	// Filterable Filterable indicates if the Field's data can be filtered by additional calls.
	Filterable *bool `json:"filterable,omitempty"`

	// Interval Interval indicates the expected regular step between values in the series.
	// When an interval exists, consumers can identify "missing" values when the expected value is not present.
	// The grafana timeseries visualization will render disconnected values when missing values are found it the time field.
	// The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.
	Interval *float64 `json:"interval,omitempty"`

	// Links The behavior when clicking on a result
	Links    *[]DataLink    `json:"links,omitempty"`
	Mappings *ValueMappings `json:"mappings,omitempty"`

	// Max ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
	// to null.
	Max *ConfFloat64 `json:"max,omitempty"`

	// Min ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
	// to null.
	Min *ConfFloat64 `json:"min,omitempty"`

	// NoValue Alternative to empty string
	NoValue *string `json:"noValue,omitempty"`

	// Path Path is an explicit path to the field in the datasource. When the frame meta includes a path,
	// this will default to `${frame.meta.path}/${field.name}
	//
	// When defined, this value can be used as an identifier within the datasource scope, and
	// may be used as an identifier to update values in a subsequent request
	Path *string `json:"path,omitempty"`

	// Thresholds ThresholdsConfig setup thresholds
	Thresholds *ThresholdsConfig `json:"thresholds,omitempty"`

	// Type FieldTypeConfig has type specific configs, only one should be active at a time
	Type *FieldTypeConfig `json:"type,omitempty"`

	// Unit Numeric Options
	Unit  *string  `json:"unit,omitempty"`
	Value *float64 `json:"value,omitempty"`

	// Writeable Writeable indicates that the datasource knows how to update this value
	Writeable *bool `json:"writeable,omitempty"`
}

// QuotaDTO defines model for QuotaDTO.
type QuotaDTO struct {
	Limit  *int64  `json:"limit,omitempty"`
	OrgId  *int64  `json:"org_id,omitempty"`
	Target *string `json:"target,omitempty"`
	Used   *int64  `json:"used,omitempty"`
	UserId *int64  `json:"user_id,omitempty"`
}

// RawMessage defines model for RawMessage.
type RawMessage = map[string]interface{}

// ReceiverExport defines model for ReceiverExport.
type ReceiverExport struct {
	DisableResolveMessage *bool       `json:"disableResolveMessage,omitempty"`
	Settings              *RawMessage `json:"settings,omitempty"`
	Type                  *string     `json:"type,omitempty"`
	Uid                   *string     `json:"uid,omitempty"`
}

// RecordingRuleJSON RecordingRuleJSON is the external representation of a recording rule
type RecordingRuleJSON struct {
	Active            *bool                     `json:"active,omitempty"`
	Count             *bool                     `json:"count,omitempty"`
	Description       *string                   `json:"description,omitempty"`
	DestDataSourceUid *string                   `json:"dest_data_source_uid,omitempty"`
	Id                *string                   `json:"id,omitempty"`
	Interval          *int64                    `json:"interval,omitempty"`
	Name              *string                   `json:"name,omitempty"`
	PromName          *string                   `json:"prom_name,omitempty"`
	Queries           *[]map[string]interface{} `json:"queries,omitempty"`
	Range             *int64                    `json:"range,omitempty"`
	TargetRefId       *string                   `json:"target_ref_id,omitempty"`
}

// RelativeTimeRange RelativeTimeRange is the per query start and end time
// for requests.
type RelativeTimeRange struct {
	// From A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	From *Duration `json:"from,omitempty"`

	// To A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	To *Duration `json:"to,omitempty"`
}

// RelativeTimeRangeExport defines model for RelativeTimeRangeExport.
type RelativeTimeRangeExport struct {
	From *int64 `json:"from,omitempty"`
	To   *int64 `json:"to,omitempty"`
}

// Report ConfigDTO is model representation in transfer
type Report struct {
	Created            *time.Time              `json:"created,omitempty"`
	DashboardId        *int64                  `json:"dashboardId,omitempty"`
	DashboardName      *string                 `json:"dashboardName,omitempty"`
	DashboardUid       *string                 `json:"dashboardUid,omitempty"`
	Dashboards         *[]ReportDashboard      `json:"dashboards,omitempty"`
	EnableCsv          *bool                   `json:"enableCsv,omitempty"`
	EnableDashboardUrl *bool                   `json:"enableDashboardUrl,omitempty"`
	Formats            *[]Type                 `json:"formats,omitempty"`
	Id                 *int64                  `json:"id,omitempty"`
	Message            *string                 `json:"message,omitempty"`
	Name               *string                 `json:"name,omitempty"`
	Options            *ReportOptions          `json:"options,omitempty"`
	OrgId              *int64                  `json:"orgId,omitempty"`
	Recipients         *string                 `json:"recipients,omitempty"`
	ReplyTo            *string                 `json:"replyTo,omitempty"`
	ScaleFactor        *int64                  `json:"scaleFactor,omitempty"`
	Schedule           *ReportSchedule         `json:"schedule,omitempty"`
	State              *State                  `json:"state,omitempty"`
	TemplateVars       *map[string]interface{} `json:"templateVars,omitempty"`
	Updated            *time.Time              `json:"updated,omitempty"`
	UserId             *int64                  `json:"userId,omitempty"`
}

// ReportBrandingOptions defines model for ReportBrandingOptions.
type ReportBrandingOptions struct {
	EmailFooterLink *string `json:"emailFooterLink,omitempty"`
	EmailFooterMode *string `json:"emailFooterMode,omitempty"`
	EmailFooterText *string `json:"emailFooterText,omitempty"`
	EmailLogoUrl    *string `json:"emailLogoUrl,omitempty"`
	ReportLogoUrl   *string `json:"reportLogoUrl,omitempty"`
}

// ReportDashboard defines model for ReportDashboard.
type ReportDashboard struct {
	Dashboard       *ReportDashboardID      `json:"dashboard,omitempty"`
	ReportVariables *map[string]interface{} `json:"reportVariables,omitempty"`
	TimeRange       *ReportTimeRange        `json:"timeRange,omitempty"`
}

// ReportDashboardID defines model for ReportDashboardID.
type ReportDashboardID struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Uid  *string `json:"uid,omitempty"`
}

// ReportEmail defines model for ReportEmail.
type ReportEmail struct {
	Email *string `json:"email,omitempty"`

	// Emails Comma-separated list of emails to which to send the report to.
	Emails *string `json:"emails,omitempty"`

	// Id Send the report to the emails specified in the report. Required if emails is not present.
	Id *string `json:"id,omitempty"`

	// UseEmailsFromReport Send the report to the emails specified in the report. Required if emails is not present.
	UseEmailsFromReport *bool `json:"useEmailsFromReport,omitempty"`
}

// ReportOptions defines model for ReportOptions.
type ReportOptions struct {
	Layout      *string          `json:"layout,omitempty"`
	Orientation *string          `json:"orientation,omitempty"`
	TimeRange   *ReportTimeRange `json:"timeRange,omitempty"`
}

// ReportSchedule defines model for ReportSchedule.
type ReportSchedule struct {
	Day               *string    `json:"day,omitempty"`
	DayOfMonth        *string    `json:"dayOfMonth,omitempty"`
	EndDate           *time.Time `json:"endDate,omitempty"`
	Frequency         *string    `json:"frequency,omitempty"`
	Hour              *int64     `json:"hour,omitempty"`
	IntervalAmount    *int64     `json:"intervalAmount,omitempty"`
	IntervalFrequency *string    `json:"intervalFrequency,omitempty"`
	Minute            *int64     `json:"minute,omitempty"`
	StartDate         *time.Time `json:"startDate,omitempty"`
	TimeZone          *string    `json:"timeZone,omitempty"`
	WorkdaysOnly      *bool      `json:"workdaysOnly,omitempty"`
}

// ReportSettings defines model for ReportSettings.
type ReportSettings struct {
	Branding *ReportBrandingOptions `json:"branding,omitempty"`
	Id       *int64                 `json:"id,omitempty"`
	OrgId    *int64                 `json:"orgId,omitempty"`
	UserId   *int64                 `json:"userId,omitempty"`
}

// ReportTimeRange defines model for ReportTimeRange.
type ReportTimeRange struct {
	From *string `json:"from,omitempty"`
	To   *string `json:"to,omitempty"`
}

// Responses The QueryData method the QueryDataHandler method will set the RefId
// property on the DataResponses' frames based on these RefIDs.
type Responses map[string]DataResponse

// RestoreDashboardVersionCommand defines model for RestoreDashboardVersionCommand.
type RestoreDashboardVersionCommand struct {
	Version *int64 `json:"version,omitempty"`
}

// RevokeAuthTokenCmd defines model for RevokeAuthTokenCmd.
type RevokeAuthTokenCmd struct {
	AuthTokenId *int64 `json:"authTokenId,omitempty"`
}

// RoleAssignmentsDTO defines model for RoleAssignmentsDTO.
type RoleAssignmentsDTO struct {
	RoleUid         *string  `json:"role_uid,omitempty"`
	ServiceAccounts *[]int64 `json:"service_accounts,omitempty"`
	Teams           *[]int64 `json:"teams,omitempty"`
	Users           *[]int64 `json:"users,omitempty"`
}

// RoleDTO defines model for RoleDTO.
type RoleDTO struct {
	Created     *time.Time    `json:"created,omitempty"`
	Delegatable *bool         `json:"delegatable,omitempty"`
	Description *string       `json:"description,omitempty"`
	DisplayName *string       `json:"displayName,omitempty"`
	Global      *bool         `json:"global,omitempty"`
	Group       *string       `json:"group,omitempty"`
	Hidden      *bool         `json:"hidden,omitempty"`
	Name        *string       `json:"name,omitempty"`
	Permissions *[]Permission `json:"permissions,omitempty"`
	Uid         *string       `json:"uid,omitempty"`
	Updated     *time.Time    `json:"updated,omitempty"`
	Version     *int64        `json:"version,omitempty"`
}

// RolesSearchQuery defines model for RolesSearchQuery.
type RolesSearchQuery struct {
	IncludeHidden *bool    `json:"includeHidden,omitempty"`
	OrgId         *int64   `json:"orgId,omitempty"`
	TeamIds       *[]int64 `json:"teamIds,omitempty"`
	UserIds       *[]int64 `json:"userIds,omitempty"`
}

// Route A Route is a node that contains definitions of how to handle alerts. This is modified
// from the upstream alertmanager in that it adds the ObjectMatchers property.
type Route struct {
	Continue      *bool     `json:"continue,omitempty"`
	GroupBy       *[]string `json:"group_by,omitempty"`
	GroupInterval *string   `json:"group_interval,omitempty"`
	GroupWait     *string   `json:"group_wait,omitempty"`

	// Match Deprecated. Remove before v1.0 release.
	Match   *map[string]string `json:"match,omitempty"`
	MatchRe *MatchRegexps      `json:"match_re,omitempty"`

	// Matchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
	// provides a Matches method to match a LabelSet against all Matchers in the
	// slice. Note that some users of Matchers might require it to be sorted.
	Matchers          *Matchers `json:"matchers,omitempty"`
	MuteTimeIntervals *[]string `json:"mute_time_intervals,omitempty"`

	// ObjectMatchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
	// provides a Matches method to match a LabelSet against all Matchers in the
	// slice. Note that some users of Matchers might require it to be sorted.
	ObjectMatchers *ObjectMatchers `json:"object_matchers,omitempty"`
	Provenance     *Provenance     `json:"provenance,omitempty"`
	Receiver       *string         `json:"receiver,omitempty"`
	RepeatInterval *string         `json:"repeat_interval,omitempty"`
	Routes         *[]Route        `json:"routes,omitempty"`
}

// RouteExport RouteExport is the provisioned file export of definitions.Route. This is needed to hide fields that aren't useable in
// provisioning file format. An alternative would be to define a custom MarshalJSON and MarshalYAML that excludes them.
type RouteExport struct {
	Continue      *bool     `json:"continue,omitempty"`
	GroupBy       *[]string `json:"group_by,omitempty"`
	GroupInterval *string   `json:"group_interval,omitempty"`
	GroupWait     *string   `json:"group_wait,omitempty"`

	// Match Deprecated. Remove before v1.0 release.
	Match   *map[string]string `json:"match,omitempty"`
	MatchRe *MatchRegexps      `json:"match_re,omitempty"`

	// Matchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
	// provides a Matches method to match a LabelSet against all Matchers in the
	// slice. Note that some users of Matchers might require it to be sorted.
	Matchers          *Matchers `json:"matchers,omitempty"`
	MuteTimeIntervals *[]string `json:"mute_time_intervals,omitempty"`

	// ObjectMatchers Matchers is a slice of Matchers that is sortable, implements Stringer, and
	// provides a Matches method to match a LabelSet against all Matchers in the
	// slice. Note that some users of Matchers might require it to be sorted.
	ObjectMatchers *ObjectMatchers `json:"object_matchers,omitempty"`
	Receiver       *string         `json:"receiver,omitempty"`
	RepeatInterval *string         `json:"repeat_interval,omitempty"`
	Routes         *[]RouteExport  `json:"routes,omitempty"`
}

// SSOSettings defines model for SSOSettings.
type SSOSettings struct {
	Id       *string                 `json:"id,omitempty"`
	Provider *string                 `json:"provider,omitempty"`
	Settings *map[string]interface{} `json:"settings,omitempty"`
	Source   *SettingsSource         `json:"source,omitempty"`
}

// SaveDashboardCommand defines model for SaveDashboardCommand.
type SaveDashboardCommand struct {
	UpdatedAt *time.Time `json:"UpdatedAt,omitempty"`
	Dashboard *Json      `json:"dashboard,omitempty"`

	// FolderId Deprecated: use FolderUID instead
	FolderId  *int64  `json:"folderId,omitempty"`
	FolderUid *string `json:"folderUid,omitempty"`
	IsFolder  *bool   `json:"isFolder,omitempty"`
	Message   *string `json:"message,omitempty"`
	Overwrite *bool   `json:"overwrite,omitempty"`
	UserId    *int64  `json:"userId,omitempty"`
}

// SearchOrgServiceAccountsResult swagger: model
type SearchOrgServiceAccountsResult struct {
	Page            *int64               `json:"page,omitempty"`
	PerPage         *int64               `json:"perPage,omitempty"`
	ServiceAccounts *[]ServiceAccountDTO `json:"serviceAccounts,omitempty"`

	// TotalCount It can be used for pagination of the user list
	// E.g. if totalCount is equal to 100 users and
	// the perpage parameter is set to 10 then there are 10 pages of users.
	TotalCount *int64 `json:"totalCount,omitempty"`
}

// SearchOrgUsersQueryResult defines model for SearchOrgUsersQueryResult.
type SearchOrgUsersQueryResult struct {
	OrgUsers   *[]OrgUserDTO `json:"orgUsers,omitempty"`
	Page       *int64        `json:"page,omitempty"`
	PerPage    *int64        `json:"perPage,omitempty"`
	TotalCount *int64        `json:"totalCount,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Result *[]SearchResultItem `json:"result,omitempty"`
}

// SearchResultItem defines model for SearchResultItem.
type SearchResultItem struct {
	Action    *string `json:"action,omitempty"`
	BasicRole *string `json:"basicRole,omitempty"`
	OrgId     *int64  `json:"orgId,omitempty"`
	RoleName  *string `json:"roleName,omitempty"`
	Scope     *string `json:"scope,omitempty"`
	TeamId    *int64  `json:"teamId,omitempty"`
	UserId    *int64  `json:"userId,omitempty"`
	Version   *int64  `json:"version,omitempty"`
}

// SearchTeamQueryResult defines model for SearchTeamQueryResult.
type SearchTeamQueryResult struct {
	Page       *int64     `json:"page,omitempty"`
	PerPage    *int64     `json:"perPage,omitempty"`
	Teams      *[]TeamDTO `json:"teams,omitempty"`
	TotalCount *int64     `json:"totalCount,omitempty"`
}

// SearchUserQueryResult defines model for SearchUserQueryResult.
type SearchUserQueryResult struct {
	Page       *int64              `json:"page,omitempty"`
	PerPage    *int64              `json:"perPage,omitempty"`
	TotalCount *int64              `json:"totalCount,omitempty"`
	Users      *[]UserSearchHitDTO `json:"users,omitempty"`
}

// ServiceAccountDTO swagger: model
type ServiceAccountDTO struct {
	AccessControl *map[string]bool `json:"accessControl,omitempty"`
	AvatarUrl     *string          `json:"avatarUrl,omitempty"`
	Id            *int64           `json:"id,omitempty"`
	IsDisabled    *bool            `json:"isDisabled,omitempty"`
	IsExternal    *bool            `json:"isExternal,omitempty"`
	Login         *string          `json:"login,omitempty"`
	Name          *string          `json:"name,omitempty"`
	OrgId         *int64           `json:"orgId,omitempty"`
	Role          *string          `json:"role,omitempty"`
	Tokens        *int64           `json:"tokens,omitempty"`
}

// ServiceAccountProfileDTO defines model for ServiceAccountProfileDTO.
type ServiceAccountProfileDTO struct {
	AccessControl *map[string]bool `json:"accessControl,omitempty"`
	AvatarUrl     *string          `json:"avatarUrl,omitempty"`
	CreatedAt     *time.Time       `json:"createdAt,omitempty"`
	Id            *int64           `json:"id,omitempty"`
	IsDisabled    *bool            `json:"isDisabled,omitempty"`
	IsExternal    *bool            `json:"isExternal,omitempty"`
	Login         *string          `json:"login,omitempty"`
	Name          *string          `json:"name,omitempty"`
	OrgId         *int64           `json:"orgId,omitempty"`
	RequiredBy    *string          `json:"requiredBy,omitempty"`
	Role          *string          `json:"role,omitempty"`
	Teams         *[]string        `json:"teams,omitempty"`
	Tokens        *int64           `json:"tokens,omitempty"`
	UpdatedAt     *time.Time       `json:"updatedAt,omitempty"`
}

// SetResourcePermissionCommand defines model for SetResourcePermissionCommand.
type SetResourcePermissionCommand struct {
	BuiltInRole *string `json:"builtInRole,omitempty"`
	Permission  *string `json:"permission,omitempty"`
	TeamId      *int64  `json:"teamId,omitempty"`
	UserId      *int64  `json:"userId,omitempty"`
}

// SetRoleAssignmentsCommand defines model for SetRoleAssignmentsCommand.
type SetRoleAssignmentsCommand struct {
	ServiceAccounts *[]int64 `json:"service_accounts,omitempty"`
	Teams           *[]int64 `json:"teams,omitempty"`
	Users           *[]int64 `json:"users,omitempty"`
}

// SetUserRolesCommand defines model for SetUserRolesCommand.
type SetUserRolesCommand struct {
	Global        *bool     `json:"global,omitempty"`
	IncludeHidden *bool     `json:"includeHidden,omitempty"`
	RoleUids      *[]string `json:"roleUids,omitempty"`
}

// SettingsBag defines model for SettingsBag.
type SettingsBag map[string]map[string]string

// SettingsSource defines model for SettingsSource.
type SettingsSource = int64

// ShareType defines model for ShareType.
type ShareType = string

// SignatureAlgorithm defines model for SignatureAlgorithm.
type SignatureAlgorithm = int64

// State defines model for State.
type State = string

// Status defines model for Status.
type Status = int64

// SuccessResponseBody defines model for SuccessResponseBody.
type SuccessResponseBody struct {
	Message *string `json:"message,omitempty"`
}

// SupportedTransformationTypes defines model for SupportedTransformationTypes.
type SupportedTransformationTypes = string

// SyncResult defines model for SyncResult.
type SyncResult struct {
	// Elapsed A Duration represents the elapsed time between two instants
	// as an int64 nanosecond count. The representation limits the
	// largest representable duration to approximately 290 years.
	Elapsed        *Duration     `json:"Elapsed,omitempty"`
	FailedUsers    *[]FailedUser `json:"FailedUsers,omitempty"`
	MissingUserIds *[]int64      `json:"MissingUserIds,omitempty"`
	Started        *time.Time    `json:"Started,omitempty"`
	UpdatedUserIds *[]int64      `json:"UpdatedUserIds,omitempty"`
}

// TagsDTO defines model for TagsDTO.
type TagsDTO struct {
	Count *int64  `json:"count,omitempty"`
	Tag   *string `json:"tag,omitempty"`
}

// TeamDTO defines model for TeamDTO.
type TeamDTO struct {
	AccessControl *map[string]bool `json:"accessControl,omitempty"`
	AvatarUrl     *string          `json:"avatarUrl,omitempty"`
	Email         *string          `json:"email,omitempty"`
	Id            *int64           `json:"id,omitempty"`
	MemberCount   *int64           `json:"memberCount,omitempty"`
	Name          *string          `json:"name,omitempty"`
	OrgId         *int64           `json:"orgId,omitempty"`
	Permission    *PermissionType  `json:"permission,omitempty"`
	Uid           *string          `json:"uid,omitempty"`
}

// TeamGroupDTO defines model for TeamGroupDTO.
type TeamGroupDTO struct {
	GroupId *string `json:"groupId,omitempty"`
	OrgId   *int64  `json:"orgId,omitempty"`
	TeamId  *int64  `json:"teamId,omitempty"`
}

// TeamGroupMapping defines model for TeamGroupMapping.
type TeamGroupMapping struct {
	GroupId *string `json:"groupId,omitempty"`
}

// TeamMemberDTO defines model for TeamMemberDTO.
type TeamMemberDTO struct {
	AuthModule *string         `json:"auth_module,omitempty"`
	AvatarUrl  *string         `json:"avatarUrl,omitempty"`
	Email      *string         `json:"email,omitempty"`
	Labels     *[]string       `json:"labels,omitempty"`
	Login      *string         `json:"login,omitempty"`
	Name       *string         `json:"name,omitempty"`
	OrgId      *int64          `json:"orgId,omitempty"`
	Permission *PermissionType `json:"permission,omitempty"`
	TeamId     *int64          `json:"teamId,omitempty"`
	TeamUID    *string         `json:"teamUID,omitempty"`
	UserId     *int64          `json:"userId,omitempty"`
}

// TempUserDTO defines model for TempUserDTO.
type TempUserDTO struct {
	Code           *string          `json:"code,omitempty"`
	CreatedOn      *time.Time       `json:"createdOn,omitempty"`
	Email          *string          `json:"email,omitempty"`
	EmailSent      *bool            `json:"emailSent,omitempty"`
	EmailSentOn    *time.Time       `json:"emailSentOn,omitempty"`
	Id             *int64           `json:"id,omitempty"`
	InvitedByEmail *string          `json:"invitedByEmail,omitempty"`
	InvitedByLogin *string          `json:"invitedByLogin,omitempty"`
	InvitedByName  *string          `json:"invitedByName,omitempty"`
	Name           *string          `json:"name,omitempty"`
	OrgId          *int64           `json:"orgId,omitempty"`
	Role           *TempUserDTORole `json:"role,omitempty"`
	Status         *TempUserStatus  `json:"status,omitempty"`
	Url            *string          `json:"url,omitempty"`
}

// TempUserDTORole defines model for TempUserDTO.Role.
type TempUserDTORole string

// TempUserStatus defines model for TempUserStatus.
type TempUserStatus = string

// Threshold Threshold a single step on the threshold list
type Threshold struct {
	Color *string `json:"color,omitempty"`
	State *string `json:"state,omitempty"`

	// Value ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf
	// to null.
	Value *ConfFloat64 `json:"value,omitempty"`
}

// ThresholdsConfig ThresholdsConfig setup thresholds
type ThresholdsConfig struct {
	// Mode ThresholdsMode absolute or percentage
	Mode *ThresholdsMode `json:"mode,omitempty"`

	// Steps Must be sorted by 'value', first value is always -Infinity
	Steps *[]Threshold `json:"steps,omitempty"`
}

// ThresholdsMode ThresholdsMode absolute or percentage
type ThresholdsMode = string

// TimeInterval TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained
// within the interval.
type TimeInterval struct {
	DaysOfMonth *[]string    `json:"days_of_month,omitempty"`
	Location    *string      `json:"location,omitempty"`
	Months      *[]string    `json:"months,omitempty"`
	Times       *[]TimeRange `json:"times,omitempty"`
	Weekdays    *[]string    `json:"weekdays,omitempty"`
	Years       *[]string    `json:"years,omitempty"`
}

// TimeRange Redefining this to avoid an import cycle
type TimeRange struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`
}

// Token defines model for Token.
type Token struct {
	Account                   *string      `json:"account,omitempty"`
	AnonymousRatio            *int64       `json:"anonymousRatio,omitempty"`
	Company                   *string      `json:"company,omitempty"`
	DetailsUrl                *string      `json:"details_url,omitempty"`
	Exp                       *int64       `json:"exp,omitempty"`
	Iat                       *int64       `json:"iat,omitempty"`
	IncludedUsers             *int64       `json:"included_users,omitempty"`
	Iss                       *string      `json:"iss,omitempty"`
	Jti                       *string      `json:"jti,omitempty"`
	Lexp                      *int64       `json:"lexp,omitempty"`
	LicExpWarnDays            *int64       `json:"lic_exp_warn_days,omitempty"`
	Lid                       *string      `json:"lid,omitempty"`
	LimitBy                   *string      `json:"limit_by,omitempty"`
	MaxConcurrentUserSessions *int64       `json:"max_concurrent_user_sessions,omitempty"`
	Nbf                       *int64       `json:"nbf,omitempty"`
	Prod                      *[]string    `json:"prod,omitempty"`
	Slug                      *string      `json:"slug,omitempty"`
	Status                    *TokenStatus `json:"status,omitempty"`
	Sub                       *string      `json:"sub,omitempty"`
	TokExpWarnDays            *int64       `json:"tok_exp_warn_days,omitempty"`
	Trial                     *bool        `json:"trial,omitempty"`
	TrialExp                  *int64       `json:"trial_exp,omitempty"`
	UpdateDays                *int64       `json:"update_days,omitempty"`
	UsageBilling              *bool        `json:"usage_billing,omitempty"`
}

// TokenDTO defines model for TokenDTO.
type TokenDTO struct {
	Created                *time.Time `json:"created,omitempty"`
	Expiration             *time.Time `json:"expiration,omitempty"`
	HasExpired             *bool      `json:"hasExpired,omitempty"`
	Id                     *int64     `json:"id,omitempty"`
	IsRevoked              *bool      `json:"isRevoked,omitempty"`
	LastUsedAt             *time.Time `json:"lastUsedAt,omitempty"`
	Name                   *string    `json:"name,omitempty"`
	SecondsUntilExpiration *float64   `json:"secondsUntilExpiration,omitempty"`
}

// TokenStatus defines model for TokenStatus.
type TokenStatus = int64

// Transformation defines model for Transformation.
type Transformation struct {
	Expression *string             `json:"expression,omitempty"`
	Field      *string             `json:"field,omitempty"`
	MapValue   *string             `json:"mapValue,omitempty"`
	Type       *TransformationType `json:"type,omitempty"`
}

// TransformationType defines model for Transformation.Type.
type TransformationType string

// Transformations defines model for Transformations.
type Transformations = []Transformation

// Type defines model for Type.
type Type = string

// URL The general form represented is:
//
// [scheme:][//[userinfo@]host][/]path[?query][#fragment]
//
// URLs that do not start with a slash after the scheme are interpreted as:
//
// scheme:opaque[?query][#fragment]
//
// Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.
// A consequence is that it is impossible to tell which slashes in the Path were
// slashes in the raw URL and which were %2f. This distinction is rarely important,
// but when it is, the code should use the EscapedPath method, which preserves
// the original encoding of Path.
//
// The RawPath field is an optional field which is only set when the default
// encoding of Path is different from the escaped path. See the EscapedPath method
// for more details.
//
// URL's String method uses the EscapedPath method to obtain the path.
type URL struct {
	ForceQuery  *bool   `json:"ForceQuery,omitempty"`
	Fragment    *string `json:"Fragment,omitempty"`
	Host        *string `json:"Host,omitempty"`
	OmitHost    *bool   `json:"OmitHost,omitempty"`
	Opaque      *string `json:"Opaque,omitempty"`
	Path        *string `json:"Path,omitempty"`
	RawFragment *string `json:"RawFragment,omitempty"`
	RawPath     *string `json:"RawPath,omitempty"`
	RawQuery    *string `json:"RawQuery,omitempty"`
	Scheme      *string `json:"Scheme,omitempty"`

	// User The Userinfo type is an immutable encapsulation of username and
	// password details for a URL. An existing Userinfo value is guaranteed
	// to have a username set (potentially empty, as allowed by RFC 2396),
	// and optionally a password.
	User *Userinfo `json:"User,omitempty"`
}

// UpdateAlertNotificationCommand defines model for UpdateAlertNotificationCommand.
type UpdateAlertNotificationCommand struct {
	DisableResolveMessage *bool              `json:"disableResolveMessage,omitempty"`
	Frequency             *string            `json:"frequency,omitempty"`
	Id                    *int64             `json:"id,omitempty"`
	IsDefault             *bool              `json:"isDefault,omitempty"`
	Name                  *string            `json:"name,omitempty"`
	SecureSettings        *map[string]string `json:"secureSettings,omitempty"`
	SendReminder          *bool              `json:"sendReminder,omitempty"`
	Settings              *Json              `json:"settings,omitempty"`
	Type                  *string            `json:"type,omitempty"`
	Uid                   *string            `json:"uid,omitempty"`
}

// UpdateAlertNotificationWithUidCommand defines model for UpdateAlertNotificationWithUidCommand.
type UpdateAlertNotificationWithUidCommand struct {
	DisableResolveMessage *bool              `json:"disableResolveMessage,omitempty"`
	Frequency             *string            `json:"frequency,omitempty"`
	IsDefault             *bool              `json:"isDefault,omitempty"`
	Name                  *string            `json:"name,omitempty"`
	SecureSettings        *map[string]string `json:"secureSettings,omitempty"`
	SendReminder          *bool              `json:"sendReminder,omitempty"`
	Settings              *Json              `json:"settings,omitempty"`
	Type                  *string            `json:"type,omitempty"`
	Uid                   *string            `json:"uid,omitempty"`
}

// UpdateAnnotationsCmd defines model for UpdateAnnotationsCmd.
type UpdateAnnotationsCmd struct {
	Data    *Json     `json:"data,omitempty"`
	Id      *int64    `json:"id,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Text    *string   `json:"text,omitempty"`
	Time    *int64    `json:"time,omitempty"`
	TimeEnd *int64    `json:"timeEnd,omitempty"`
}

// UpdateCorrelationCommand UpdateCorrelationCommand is the command for updating a correlation
type UpdateCorrelationCommand struct {
	Config *CorrelationConfigUpdateDTO `json:"config,omitempty"`

	// Description Optional description of the correlation
	Description *string `json:"description,omitempty"`

	// Label Optional label identifying the correlation
	Label *string `json:"label,omitempty"`
}

// UpdateCorrelationResponseBody defines model for UpdateCorrelationResponseBody.
type UpdateCorrelationResponseBody struct {
	Message *string `json:"message,omitempty"`

	// Result Correlation is the model for correlations definitions
	Result *Correlation `json:"result,omitempty"`
}

// UpdateDashboardACLCommand defines model for UpdateDashboardACLCommand.
type UpdateDashboardACLCommand struct {
	Items *[]DashboardACLUpdateItem `json:"items,omitempty"`
}

// UpdateDataSourceCommand Also acts as api DTO
type UpdateDataSourceCommand struct {
	Access          *DsAccess          `json:"access,omitempty"`
	BasicAuth       *bool              `json:"basicAuth,omitempty"`
	BasicAuthUser   *string            `json:"basicAuthUser,omitempty"`
	Database        *string            `json:"database,omitempty"`
	IsDefault       *bool              `json:"isDefault,omitempty"`
	JsonData        *Json              `json:"jsonData,omitempty"`
	Name            *string            `json:"name,omitempty"`
	SecureJsonData  *map[string]string `json:"secureJsonData,omitempty"`
	Type            *string            `json:"type,omitempty"`
	Uid             *string            `json:"uid,omitempty"`
	Url             *string            `json:"url,omitempty"`
	User            *string            `json:"user,omitempty"`
	Version         *int64             `json:"version,omitempty"`
	WithCredentials *bool              `json:"withCredentials,omitempty"`
}

// UpdateFolderCommand UpdateFolderCommand captures the information required by the folder service
// to update a folder. Use Move to update a folder's parent folder.
type UpdateFolderCommand struct {
	// Description NewDescription it's an optional parameter used for overriding the existing folder description
	Description *string `json:"description,omitempty"`

	// Overwrite Overwrite only used by the legacy folder implementation
	Overwrite *bool `json:"overwrite,omitempty"`

	// Title NewTitle it's an optional parameter used for overriding the existing folder title
	Title *string `json:"title,omitempty"`

	// Version Version only used by the legacy folder implementation
	Version *int64 `json:"version,omitempty"`
}

// UpdateOrgAddressForm defines model for UpdateOrgAddressForm.
type UpdateOrgAddressForm struct {
	Address1 *string `json:"address1,omitempty"`
	Address2 *string `json:"address2,omitempty"`
	City     *string `json:"city,omitempty"`
	Country  *string `json:"country,omitempty"`
	State    *string `json:"state,omitempty"`
	Zipcode  *string `json:"zipcode,omitempty"`
}

// UpdateOrgForm defines model for UpdateOrgForm.
type UpdateOrgForm struct {
	Name *string `json:"name,omitempty"`
}

// UpdateOrgUserCommand defines model for UpdateOrgUserCommand.
type UpdateOrgUserCommand struct {
	Role *UpdateOrgUserCommandRole `json:"role,omitempty"`
}

// UpdateOrgUserCommandRole defines model for UpdateOrgUserCommand.Role.
type UpdateOrgUserCommandRole string

// UpdatePlaylistCommand defines model for UpdatePlaylistCommand.
type UpdatePlaylistCommand struct {
	Interval *string         `json:"interval,omitempty"`
	Items    *[]PlaylistItem `json:"items,omitempty"`
	Name     *string         `json:"name,omitempty"`
	Uid      *string         `json:"uid,omitempty"`
}

// UpdatePrefsCmd defines model for UpdatePrefsCmd.
type UpdatePrefsCmd struct {
	Cookies *[]CookieType `json:"cookies,omitempty"`

	// HomeDashboardId The numerical :id of a favorited dashboard
	HomeDashboardId  *int64                  `json:"homeDashboardId,omitempty"`
	HomeDashboardUID *string                 `json:"homeDashboardUID,omitempty"`
	Language         *string                 `json:"language,omitempty"`
	QueryHistory     *QueryHistoryPreference `json:"queryHistory,omitempty"`
	Theme            *UpdatePrefsCmdTheme    `json:"theme,omitempty"`
	Timezone         *UpdatePrefsCmdTimezone `json:"timezone,omitempty"`
	WeekStart        *string                 `json:"weekStart,omitempty"`
}

// UpdatePrefsCmdTheme defines model for UpdatePrefsCmd.Theme.
type UpdatePrefsCmdTheme string

// UpdatePrefsCmdTimezone defines model for UpdatePrefsCmd.Timezone.
type UpdatePrefsCmdTimezone string

// UpdateQuotaCmd defines model for UpdateQuotaCmd.
type UpdateQuotaCmd struct {
	Limit  *int64  `json:"limit,omitempty"`
	Target *string `json:"target,omitempty"`
}

// UpdateRoleCommand defines model for UpdateRoleCommand.
type UpdateRoleCommand struct {
	Description *string       `json:"description,omitempty"`
	DisplayName *string       `json:"displayName,omitempty"`
	Global      *bool         `json:"global,omitempty"`
	Group       *string       `json:"group,omitempty"`
	Hidden      *bool         `json:"hidden,omitempty"`
	Name        *string       `json:"name,omitempty"`
	Permissions *[]Permission `json:"permissions,omitempty"`
	Version     *int64        `json:"version,omitempty"`
}

// UpdateServiceAccountForm defines model for UpdateServiceAccountForm.
type UpdateServiceAccountForm struct {
	IsDisabled       *bool                         `json:"isDisabled,omitempty"`
	Name             *string                       `json:"name,omitempty"`
	Role             *UpdateServiceAccountFormRole `json:"role,omitempty"`
	ServiceAccountId *int64                        `json:"serviceAccountId,omitempty"`
}

// UpdateServiceAccountFormRole defines model for UpdateServiceAccountForm.Role.
type UpdateServiceAccountFormRole string

// UpdateTeamCommand defines model for UpdateTeamCommand.
type UpdateTeamCommand struct {
	Email *string `json:"Email,omitempty"`
	ID    *int64  `json:"ID,omitempty"`
	Name  *string `json:"Name,omitempty"`
}

// UpdateTeamMemberCommand defines model for UpdateTeamMemberCommand.
type UpdateTeamMemberCommand struct {
	Permission *PermissionType `json:"permission,omitempty"`
}

// UpdateUserCommand defines model for UpdateUserCommand.
type UpdateUserCommand struct {
	Email *string `json:"email,omitempty"`
	Login *string `json:"login,omitempty"`
	Name  *string `json:"name,omitempty"`
	Theme *string `json:"theme,omitempty"`
}

// UserLookupDTO defines model for UserLookupDTO.
type UserLookupDTO struct {
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	Login     *string `json:"login,omitempty"`
	UserId    *int64  `json:"userId,omitempty"`
}

// UserOrgDTO defines model for UserOrgDTO.
type UserOrgDTO struct {
	Name  *string         `json:"name,omitempty"`
	OrgId *int64          `json:"orgId,omitempty"`
	Role  *UserOrgDTORole `json:"role,omitempty"`
}

// UserOrgDTORole defines model for UserOrgDTO.Role.
type UserOrgDTORole string

// UserProfileDTO defines model for UserProfileDTO.
type UserProfileDTO struct {
	AccessControl                  *map[string]bool `json:"accessControl,omitempty"`
	AuthLabels                     *[]string        `json:"authLabels,omitempty"`
	AvatarUrl                      *string          `json:"avatarUrl,omitempty"`
	CreatedAt                      *time.Time       `json:"createdAt,omitempty"`
	Email                          *string          `json:"email,omitempty"`
	Id                             *int64           `json:"id,omitempty"`
	IsDisabled                     *bool            `json:"isDisabled,omitempty"`
	IsExternal                     *bool            `json:"isExternal,omitempty"`
	IsExternallySynced             *bool            `json:"isExternallySynced,omitempty"`
	IsGrafanaAdmin                 *bool            `json:"isGrafanaAdmin,omitempty"`
	IsGrafanaAdminExternallySynced *bool            `json:"isGrafanaAdminExternallySynced,omitempty"`
	Login                          *string          `json:"login,omitempty"`
	Name                           *string          `json:"name,omitempty"`
	OrgId                          *int64           `json:"orgId,omitempty"`
	Theme                          *string          `json:"theme,omitempty"`
	UpdatedAt                      *time.Time       `json:"updatedAt,omitempty"`
}

// UserSearchHitDTO defines model for UserSearchHitDTO.
type UserSearchHitDTO struct {
	AuthLabels    *[]string  `json:"authLabels,omitempty"`
	AvatarUrl     *string    `json:"avatarUrl,omitempty"`
	Email         *string    `json:"email,omitempty"`
	Id            *int64     `json:"id,omitempty"`
	IsAdmin       *bool      `json:"isAdmin,omitempty"`
	IsDisabled    *bool      `json:"isDisabled,omitempty"`
	LastSeenAt    *time.Time `json:"lastSeenAt,omitempty"`
	LastSeenAtAge *string    `json:"lastSeenAtAge,omitempty"`
	Login         *string    `json:"login,omitempty"`
	Name          *string    `json:"name,omitempty"`
}

// UserToken UserToken represents a user token
type UserToken struct {
	AuthToken     *string `json:"AuthToken,omitempty"`
	AuthTokenSeen *bool   `json:"AuthTokenSeen,omitempty"`
	ClientIp      *string `json:"ClientIp,omitempty"`
	CreatedAt     *int64  `json:"CreatedAt,omitempty"`
	Id            *int64  `json:"Id,omitempty"`
	PrevAuthToken *string `json:"PrevAuthToken,omitempty"`
	RevokedAt     *int64  `json:"RevokedAt,omitempty"`
	RotatedAt     *int64  `json:"RotatedAt,omitempty"`
	SeenAt        *int64  `json:"SeenAt,omitempty"`
	UnhashedToken *string `json:"UnhashedToken,omitempty"`
	UpdatedAt     *int64  `json:"UpdatedAt,omitempty"`
	UserAgent     *string `json:"UserAgent,omitempty"`
	UserId        *int64  `json:"UserId,omitempty"`
}

// Userinfo The Userinfo type is an immutable encapsulation of username and
// password details for a URL. An existing Userinfo value is guaranteed
// to have a username set (potentially empty, as allowed by RFC 2396),
// and optionally a password.
type Userinfo = map[string]interface{}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Msg *string `json:"msg,omitempty"`
}

// ValueMapping ValueMapping allows mapping input values to text and color
type ValueMapping = map[string]interface{}

// ValueMappings defines model for ValueMappings.
type ValueMappings = []ValueMapping

// VisType defines model for VisType.
type VisType = string

// DeviceDTO defines model for deviceDTO.
type DeviceDTO struct {
	AvatarUrl  *string    `json:"avatarUrl,omitempty"`
	ClientIp   *string    `json:"clientIp,omitempty"`
	CreatedAt  *time.Time `json:"createdAt,omitempty"`
	DeviceId   *string    `json:"deviceId,omitempty"`
	LastSeenAt *string    `json:"lastSeenAt,omitempty"`
	UpdatedAt  *time.Time `json:"updatedAt,omitempty"`
	UserAgent  *string    `json:"userAgent,omitempty"`
}

// PublicError PublicError is derived from Error and only contains information
// available to the end user.
type PublicError struct {
	// Extra Extra Additional information about the error
	Extra *map[string]interface{} `json:"extra,omitempty"`

	// Message Message A human readable message
	Message *string `json:"message,omitempty"`

	// MessageId MessageID A unique identifier for the error
	MessageId string `json:"messageId"`

	// StatusCode StatusCode The HTTP status code returned
	StatusCode int64 `json:"statusCode"`
}

// ResourcePermissionDTO defines model for resourcePermissionDTO.
type ResourcePermissionDTO struct {
	Actions          *[]string `json:"actions,omitempty"`
	BuiltInRole      *string   `json:"builtInRole,omitempty"`
	Id               *int64    `json:"id,omitempty"`
	IsInherited      *bool     `json:"isInherited,omitempty"`
	IsManaged        *bool     `json:"isManaged,omitempty"`
	IsServiceAccount *bool     `json:"isServiceAccount,omitempty"`
	Permission       *string   `json:"permission,omitempty"`
	RoleName         *string   `json:"roleName,omitempty"`
	Team             *string   `json:"team,omitempty"`
	TeamAvatarUrl    *string   `json:"teamAvatarUrl,omitempty"`
	TeamId           *int64    `json:"teamId,omitempty"`
	UserAvatarUrl    *string   `json:"userAvatarUrl,omitempty"`
	UserId           *int64    `json:"userId,omitempty"`
	UserLogin        *string   `json:"userLogin,omitempty"`
}

// SetPermissionCommand defines model for setPermissionCommand.
type SetPermissionCommand struct {
	Permission *string `json:"permission,omitempty"`
}

// SetPermissionsCommand defines model for setPermissionsCommand.
type SetPermissionsCommand struct {
	Permissions *[]SetResourcePermissionCommand `json:"permissions,omitempty"`
}

// AcceptedResponse defines model for acceptedResponse.
type AcceptedResponse = ErrorResponseBody

// AdminGetSettingsResponse defines model for adminGetSettingsResponse.
type AdminGetSettingsResponse = SettingsBag

// AdminGetStatsResponse defines model for adminGetStatsResponse.
type AdminGetStatsResponse = AdminStats

// AdminGetUserAuthTokensResponse defines model for adminGetUserAuthTokensResponse.
type AdminGetUserAuthTokensResponse = []UserToken

// BadRequestError defines model for badRequestError.
type BadRequestError = ErrorResponseBody

// BadRequestPublicError PublicError is derived from Error and only contains information
// available to the end user.
type BadRequestPublicError = PublicError

// CalculateDashboardDiffResponse defines model for calculateDashboardDiffResponse.
type CalculateDashboardDiffResponse = []uint8

// ConflictError defines model for conflictError.
type ConflictError = ErrorResponseBody

// ContentResponse defines model for contentResponse.
type ContentResponse = []uint8

// CreateCorrelationResponse CreateCorrelationResponse is the response struct for CreateCorrelationCommand
type CreateCorrelationResponse = CreateCorrelationResponseBody

// CreateDashboardSnapshotResponse defines model for createDashboardSnapshotResponse.
type CreateDashboardSnapshotResponse struct {
	// DeleteKey Unique key used to delete the snapshot. It is different from the key so that only the creator can delete the snapshot.
	DeleteKey *string `json:"deleteKey,omitempty"`
	DeleteUrl *string `json:"deleteUrl,omitempty"`

	// Id Snapshot id
	Id *int64 `json:"id,omitempty"`

	// Key Unique key
	Key *string `json:"key,omitempty"`
	Url *string `json:"url,omitempty"`
}

// CreateOrUpdateDatasourceResponse defines model for createOrUpdateDatasourceResponse.
type CreateOrUpdateDatasourceResponse struct {
	Datasource DataSource `json:"datasource"`

	// Id ID Identifier of the new data source.
	Id int64 `json:"id"`

	// Message Message Message of the deleted dashboard.
	Message string `json:"message"`

	// Name Name of the new data source.
	Name string `json:"name"`
}

// CreateOrgResponse defines model for createOrgResponse.
type CreateOrgResponse struct {
	// Message Message Message of the created org.
	Message string `json:"message"`

	// OrgId ID Identifier of the created org.
	OrgId int64 `json:"orgId"`
}

// CreatePlaylistResponse Playlist model
type CreatePlaylistResponse = Playlist

// CreatePublicDashboardResponse defines model for createPublicDashboardResponse.
type CreatePublicDashboardResponse = PublicDashboard

// CreateReportResponse defines model for createReportResponse.
type CreateReportResponse struct {
	Id      *int64  `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// CreateRoleResponse defines model for createRoleResponse.
type CreateRoleResponse = RoleDTO

// CreateServiceAccountResponse swagger: model
type CreateServiceAccountResponse = ServiceAccountDTO

// CreateTeamResponse defines model for createTeamResponse.
type CreateTeamResponse struct {
	Message *string `json:"message,omitempty"`
	TeamId  *int64  `json:"teamId,omitempty"`
}

// CreateTokenResponse defines model for createTokenResponse.
type CreateTokenResponse = NewApiKeyResult

// DashboardResponse defines model for dashboardResponse.
type DashboardResponse = DashboardFullWithMeta

// DashboardVersionResponse DashboardVersionMeta extends the DashboardVersionDTO with the names
// associated with the UserIds, overriding the field with the same name from
// the DashboardVersionDTO model.
type DashboardVersionResponse = DashboardVersionMeta

// DashboardVersionsResponse defines model for dashboardVersionsResponse.
type DashboardVersionsResponse = []DashboardVersionMeta

// DeleteAlertNotificationChannelResponse defines model for deleteAlertNotificationChannelResponse.
type DeleteAlertNotificationChannelResponse struct {
	// Id ID Identifier of the deleted notification channel.
	Id int64 `json:"id"`

	// Message Message Message of the deleted notificatiton channel.
	Message string `json:"message"`
}

// DeleteCorrelationResponse defines model for deleteCorrelationResponse.
type DeleteCorrelationResponse = DeleteCorrelationResponseBody

// DeleteDashboardResponse defines model for deleteDashboardResponse.
type DeleteDashboardResponse struct {
	// Id ID Identifier of the deleted dashboard.
	Id int64 `json:"id"`

	// Message Message Message of the deleted dashboard.
	Message string `json:"message"`

	// Title Title Title of the deleted dashboard.
	Title string `json:"title"`
}

// DeleteDataSourceByNameResponse defines model for deleteDataSourceByNameResponse.
type DeleteDataSourceByNameResponse struct {
	// Id ID Identifier of the deleted data source.
	Id int64 `json:"id"`

	// Message Message Message of the deleted dashboard.
	Message string `json:"message"`
}

// DeleteFolderResponse defines model for deleteFolderResponse.
type DeleteFolderResponse struct {
	// Id ID Identifier of the deleted folder.
	Id int64 `json:"id"`

	// Message Message Message of the deleted folder.
	Message string `json:"message"`

	// Title Title of the deleted folder.
	Title string `json:"title"`
}

// DevicesResponse defines model for devicesResponse.
type DevicesResponse = []DeviceDTO

// FolderResponse defines model for folderResponse.
type FolderResponse = Folder

// ForbiddenError defines model for forbiddenError.
type ForbiddenError = ErrorResponseBody

// ForbiddenPublicError PublicError is derived from Error and only contains information
// available to the end user.
type ForbiddenPublicError = PublicError

// GetAPIkeyResponse defines model for getAPIkeyResponse.
type GetAPIkeyResponse = []ApiKeyDTO

// GetAccessControlStatusResponse defines model for getAccessControlStatusResponse.
type GetAccessControlStatusResponse = Status

// GetAlertNotificationChannelResponse defines model for getAlertNotificationChannelResponse.
type GetAlertNotificationChannelResponse = AlertNotification

// GetAlertNotificationChannelsResponse defines model for getAlertNotificationChannelsResponse.
type GetAlertNotificationChannelsResponse = []AlertNotification

// GetAlertNotificationLookupResponse defines model for getAlertNotificationLookupResponse.
type GetAlertNotificationLookupResponse = []AlertNotificationLookup

// GetAlertResponse defines model for getAlertResponse.
type GetAlertResponse = LegacyAlert

// GetAlertsResponse defines model for getAlertsResponse.
type GetAlertsResponse = []AlertListItemDTO

// GetAllRolesResponse defines model for getAllRolesResponse.
type GetAllRolesResponse = []RoleDTO

// GetAnnotationByIDResponse defines model for getAnnotationByIDResponse.
type GetAnnotationByIDResponse = Annotation

// GetAnnotationsResponse defines model for getAnnotationsResponse.
type GetAnnotationsResponse = []Annotation

// GetCorrelationResponse Correlation is the model for correlations definitions
type GetCorrelationResponse = Correlation

// GetCorrelationsBySourceUIDResponse defines model for getCorrelationsBySourceUIDResponse.
type GetCorrelationsBySourceUIDResponse = []Correlation

// GetCorrelationsResponse defines model for getCorrelationsResponse.
type GetCorrelationsResponse = []Correlation

// GetCurrentOrgResponse defines model for getCurrentOrgResponse.
type GetCurrentOrgResponse = OrgDetailsDTO

// GetDashboardPermissionsListResponse defines model for getDashboardPermissionsListResponse.
type GetDashboardPermissionsListResponse = []DashboardACLInfoDTO

// GetDashboardStatesResponse defines model for getDashboardStatesResponse.
type GetDashboardStatesResponse = []AlertStateInfoDTO

// GetDashboardsTagsResponse defines model for getDashboardsTagsResponse.
type GetDashboardsTagsResponse = []DashboardTagCloudItem

// GetDataSourceIDResponse defines model for getDataSourceIDResponse.
type GetDataSourceIDResponse struct {
	// Id ID Identifier of the data source.
	Id int64 `json:"id"`
}

// GetDataSourceResponse defines model for getDataSourceResponse.
type GetDataSourceResponse = DataSource

// GetDataSourcesResponse defines model for getDataSourcesResponse.
type GetDataSourcesResponse = DataSourceList

// GetFolderDescendantCountsResponse defines model for getFolderDescendantCountsResponse.
type GetFolderDescendantCountsResponse = DescendantCounts

// GetFolderPermissionListResponse defines model for getFolderPermissionListResponse.
type GetFolderPermissionListResponse = []DashboardACLInfoDTO

// GetFoldersResponse defines model for getFoldersResponse.
type GetFoldersResponse = []FolderSearchHit

// GetLibraryElementArrayResponse defines model for getLibraryElementArrayResponse.
type GetLibraryElementArrayResponse = LibraryElementArrayResponse

// GetLibraryElementConnectionsResponse defines model for getLibraryElementConnectionsResponse.
type GetLibraryElementConnectionsResponse = LibraryElementConnectionsResponse

// GetLibraryElementResponse defines model for getLibraryElementResponse.
type GetLibraryElementResponse = LibraryElementResponse

// GetLibraryElementsResponse defines model for getLibraryElementsResponse.
type GetLibraryElementsResponse = LibraryElementSearchResponse

// GetLicenseTokenResponse defines model for getLicenseTokenResponse.
type GetLicenseTokenResponse = Token

// GetOrgByIDResponse defines model for getOrgByIDResponse.
type GetOrgByIDResponse = OrgDetailsDTO

// GetOrgByNameResponse defines model for getOrgByNameResponse.
type GetOrgByNameResponse = OrgDetailsDTO

// GetOrgUsersForCurrentOrgLookupResponse defines model for getOrgUsersForCurrentOrgLookupResponse.
type GetOrgUsersForCurrentOrgLookupResponse = []UserLookupDTO

// GetOrgUsersForCurrentOrgResponse defines model for getOrgUsersForCurrentOrgResponse.
type GetOrgUsersForCurrentOrgResponse = []OrgUserDTO

// GetOrgUsersResponse defines model for getOrgUsersResponse.
type GetOrgUsersResponse = []OrgUserDTO

// GetPendingOrgInvitesResponse defines model for getPendingOrgInvitesResponse.
type GetPendingOrgInvitesResponse = []TempUserDTO

// GetPlaylistItemsResponse defines model for getPlaylistItemsResponse.
type GetPlaylistItemsResponse = []PlaylistItemDTO

// GetPlaylistResponse defines model for getPlaylistResponse.
type GetPlaylistResponse = PlaylistDTO

// GetPreferencesResponse Spec defines user, team or org Grafana preferences
type GetPreferencesResponse = Preferences

// GetPublicAnnotationsResponse defines model for getPublicAnnotationsResponse.
type GetPublicAnnotationsResponse = []AnnotationEvent

// GetPublicDashboardResponse defines model for getPublicDashboardResponse.
type GetPublicDashboardResponse = PublicDashboard

// GetQueryHistoryDeleteQueryResponse QueryHistoryDeleteQueryResponse is the response struct for deleting a query from query history
type GetQueryHistoryDeleteQueryResponse = QueryHistoryDeleteQueryResponse

// GetQueryHistoryResponse QueryHistoryResponse is a response struct for QueryHistoryDTO
type GetQueryHistoryResponse = QueryHistoryResponse

// GetQueryHistorySearchResponse defines model for getQueryHistorySearchResponse.
type GetQueryHistorySearchResponse = QueryHistorySearchResponse

// GetQuotaResponse defines model for getQuotaResponse.
type GetQuotaResponse = []QuotaDTO

// GetReportResponse ConfigDTO is model representation in transfer
type GetReportResponse = Report

// GetReportSettingsResponse defines model for getReportSettingsResponse.
type GetReportSettingsResponse = ReportSettings

// GetReportsResponse defines model for getReportsResponse.
type GetReportsResponse = []Report

// GetResourcePermissionsResponse defines model for getResourcePermissionsResponse.
type GetResourcePermissionsResponse = []ResourcePermissionDTO

// GetRoleAssignmentsResponse defines model for getRoleAssignmentsResponse.
type GetRoleAssignmentsResponse = RoleAssignmentsDTO

// GetRoleResponse defines model for getRoleResponse.
type GetRoleResponse = RoleDTO

// GetSharingOptionsResponse defines model for getSharingOptionsResponse.
type GetSharingOptionsResponse struct {
	ExternalEnabled      *bool   `json:"externalEnabled,omitempty"`
	ExternalSnapshotName *string `json:"externalSnapshotName,omitempty"`
	ExternalSnapshotURL  *string `json:"externalSnapshotURL,omitempty"`
}

// GetSignedInUserOrgListResponse defines model for getSignedInUserOrgListResponse.
type GetSignedInUserOrgListResponse = []UserOrgDTO

// GetSignedInUserTeamListResponse defines model for getSignedInUserTeamListResponse.
type GetSignedInUserTeamListResponse = []TeamDTO

// GetSyncStatusResponse ActiveSyncStatusDTO holds the information for LDAP background Sync
type GetSyncStatusResponse = ActiveSyncStatusDTO

// GetTeamByIDResponse defines model for getTeamByIDResponse.
type GetTeamByIDResponse = TeamDTO

// GetTeamGroupsApiResponse defines model for getTeamGroupsApiResponse.
type GetTeamGroupsApiResponse = []TeamGroupDTO

// GetTeamMembersResponse defines model for getTeamMembersResponse.
type GetTeamMembersResponse = []TeamMemberDTO

// GetUserAuthTokensResponse defines model for getUserAuthTokensResponse.
type GetUserAuthTokensResponse = []UserToken

// GetUserOrgListResponse defines model for getUserOrgListResponse.
type GetUserOrgListResponse = []UserOrgDTO

// GetUserTeamsResponse defines model for getUserTeamsResponse.
type GetUserTeamsResponse = []TeamDTO

// HelpFlagResponse defines model for helpFlagResponse.
type HelpFlagResponse struct {
	HelpFlags1 *int64  `json:"helpFlags1,omitempty"`
	Message    *string `json:"message,omitempty"`
}

// InternalServerError defines model for internalServerError.
type InternalServerError = ErrorResponseBody

// InternalServerPublicError PublicError is derived from Error and only contains information
// available to the end user.
type InternalServerPublicError = PublicError

// JwksResponse defines model for jwksResponse.
type JwksResponse struct {
	Keys *[]JSONWebKey `json:"keys,omitempty"`
}

// ListPublicDashboardsResponse defines model for listPublicDashboardsResponse.
type ListPublicDashboardsResponse = PublicDashboardListResponseWithPagination

// ListRecordingRulesResponse defines model for listRecordingRulesResponse.
type ListRecordingRulesResponse = []RecordingRuleJSON

// ListRolesResponse defines model for listRolesResponse.
type ListRolesResponse = []RoleDTO

// ListSortOptionsResponse defines model for listSortOptionsResponse.
type ListSortOptionsResponse struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Meta        *string `json:"meta,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ListTeamsRolesResponse defines model for listTeamsRolesResponse.
type ListTeamsRolesResponse map[string][]RoleDTO

// ListTokensResponse defines model for listTokensResponse.
type ListTokensResponse = []TokenDTO

// ListUsersRolesResponse defines model for listUsersRolesResponse.
type ListUsersRolesResponse map[string][]RoleDTO

// NotFoundError defines model for notFoundError.
type NotFoundError = ErrorResponseBody

// NotFoundPublicError PublicError is derived from Error and only contains information
// available to the end user.
type NotFoundPublicError = PublicError

// OkResponse defines model for okResponse.
type OkResponse = SuccessResponseBody

// PauseAlertResponse defines model for pauseAlertResponse.
type PauseAlertResponse struct {
	AlertId int64  `json:"alertId"`
	Message string `json:"message"`

	// State Alert result state
	// required true
	State *string `json:"state,omitempty"`
}

// PauseAlertsResponse defines model for pauseAlertsResponse.
type PauseAlertsResponse struct {
	// AlertsAffected AlertsAffected is the number of the affected alerts.
	AlertsAffected int64  `json:"alertsAffected"`
	Message        string `json:"message"`

	// State Alert result state
	// required true
	State *string `json:"state,omitempty"`
}

// PostAPIkeyResponse defines model for postAPIkeyResponse.
type PostAPIkeyResponse = NewApiKeyResult

// PostAnnotationResponse defines model for postAnnotationResponse.
type PostAnnotationResponse struct {
	// Id ID Identifier of the created annotation.
	Id int64 `json:"id"`

	// Message Message Message of the created annotation.
	Message string `json:"message"`
}

// PostDashboardResponse defines model for postDashboardResponse.
type PostDashboardResponse struct {
	// FolderUid FolderUID The unique identifier (uid) of the folder the dashboard belongs to.
	FolderUid *string `json:"folderUid,omitempty"`

	// Id ID The unique identifier (id) of the created/updated dashboard.
	Id int64 `json:"id"`

	// Status Status status of the response.
	Status string `json:"status"`

	// Title Slug The slug of the dashboard.
	Title string `json:"title"`

	// Uid UID The unique identifier (uid) of the created/updated dashboard.
	Uid string `json:"uid"`

	// Url URL The relative URL for accessing the created/updated dashboard.
	Url string `json:"url"`

	// Version Version The version of the dashboard.
	Version int64 `json:"version"`
}

// PreconditionFailedError defines model for preconditionFailedError.
type PreconditionFailedError = ErrorResponseBody

// QueryMetricsWithExpressionsRespons It is the return type of a QueryData call.
type QueryMetricsWithExpressionsRespons = QueryDataResponse

// QueryPublicDashboardResponse It is the return type of a QueryData call.
type QueryPublicDashboardResponse = QueryDataResponse

// RecordingRuleResponse RecordingRuleJSON is the external representation of a recording rule
type RecordingRuleResponse = RecordingRuleJSON

// RecordingRuleWriteTargetResponse defines model for recordingRuleWriteTargetResponse.
type RecordingRuleWriteTargetResponse = PrometheusRemoteWriteTargetJSON

// RefreshLicenseStatsResponse defines model for refreshLicenseStatsResponse.
type RefreshLicenseStatsResponse = ActiveUserStats

// ResourcePermissionsDescription defines model for resourcePermissionsDescription.
type ResourcePermissionsDescription = Description

// RetrieveServiceAccountResponse swagger: model
type RetrieveServiceAccountResponse = ServiceAccountDTO

// SearchDashboardSnapshotsResponse defines model for searchDashboardSnapshotsResponse.
type SearchDashboardSnapshotsResponse = []DashboardSnapshotDTO

// SearchOrgServiceAccountsWithPagingResponse swagger: model
type SearchOrgServiceAccountsWithPagingResponse = SearchOrgServiceAccountsResult

// SearchOrgUsersResponse defines model for searchOrgUsersResponse.
type SearchOrgUsersResponse = SearchOrgUsersQueryResult

// SearchOrgsResponse defines model for searchOrgsResponse.
type SearchOrgsResponse = []OrgDTO

// SearchPlaylistsResponse defines model for searchPlaylistsResponse.
type SearchPlaylistsResponse = Playlists

// SearchResponse defines model for searchResponse.
type SearchResponse = HitList

// SearchResultResponse defines model for searchResultResponse.
type SearchResultResponse = SearchResult

// SearchTeamsResponse defines model for searchTeamsResponse.
type SearchTeamsResponse = SearchTeamQueryResult

// SearchUsersResponse defines model for searchUsersResponse.
type SearchUsersResponse = []UserSearchHitDTO

// SearchUsersWithPagingResponse defines model for searchUsersWithPagingResponse.
type SearchUsersWithPagingResponse = SearchUserQueryResult

// SetRoleAssignmentsResponse defines model for setRoleAssignmentsResponse.
type SetRoleAssignmentsResponse = RoleAssignmentsDTO

// TestAlertResponse defines model for testAlertResponse.
type TestAlertResponse = AlertTestResult

// UnauthorisedError defines model for unauthorisedError.
type UnauthorisedError = ErrorResponseBody

// UnauthorisedPublicError PublicError is derived from Error and only contains information
// available to the end user.
type UnauthorisedPublicError = PublicError

// UnprocessableEntityError defines model for unprocessableEntityError.
type UnprocessableEntityError = ErrorResponseBody

// UpdateCorrelationResponse defines model for updateCorrelationResponse.
type UpdateCorrelationResponse = UpdateCorrelationResponseBody

// UpdatePlaylistResponse defines model for updatePlaylistResponse.
type UpdatePlaylistResponse = PlaylistDTO

// UpdatePublicDashboardResponse defines model for updatePublicDashboardResponse.
type UpdatePublicDashboardResponse = PublicDashboard

// UpdateServiceAccountResponse defines model for updateServiceAccountResponse.
type UpdateServiceAccountResponse struct {
	Id             *int64                    `json:"id,omitempty"`
	Message        *string                   `json:"message,omitempty"`
	Name           *string                   `json:"name,omitempty"`
	Serviceaccount *ServiceAccountProfileDTO `json:"serviceaccount,omitempty"`
}

// UserResponse defines model for userResponse.
type UserResponse = UserProfileDTO

// ViewPublicDashboardResponse defines model for viewPublicDashboardResponse.
type ViewPublicDashboardResponse = DashboardFullWithMeta

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	Delegatable *bool `form:"delegatable,omitempty" json:"delegatable,omitempty"`
}

// DeleteRoleParams defines parameters for DeleteRole.
type DeleteRoleParams struct {
	Force  *bool `form:"force,omitempty" json:"force,omitempty"`
	Global *bool `form:"global,omitempty" json:"global,omitempty"`
}

// RemoveUserRoleParams defines parameters for RemoveUserRole.
type RemoveUserRoleParams struct {
	// Global A flag indicating if the assignment is global or not. If set to false, the default org ID of the authenticated user will be used from the request to remove assignment.
	Global *bool `form:"global,omitempty" json:"global,omitempty"`
}

// GetAlertsParams defines parameters for GetAlerts.
type GetAlertsParams struct {
	// DashboardId Limit response to alerts in specified dashboard(s). You can specify multiple dashboards.
	DashboardId *[]string `form:"dashboardId,omitempty" json:"dashboardId,omitempty"`

	// PanelId Limit response to alert for a specified panel on a dashboard.
	PanelId *int64 `form:"panelId,omitempty" json:"panelId,omitempty"`

	// Query Limit response to alerts having a name like this value.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// State Return alerts with one or more of the following alert states
	State *GetAlertsParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Limit Limit response to X number of alerts.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// FolderId Limit response to alerts of dashboards in specified folder(s). You can specify multiple folders
	FolderId *[]string `form:"folderId,omitempty" json:"folderId,omitempty"`

	// DashboardQuery Limit response to alerts having a dashboard name like this value./ Limit response to alerts having a dashboard name like this value.
	DashboardQuery *string `form:"dashboardQuery,omitempty" json:"dashboardQuery,omitempty"`

	// DashboardTag Limit response to alerts of dashboards with specified tags. To do an “AND” filtering with multiple tags, specify the tags parameter multiple times
	DashboardTag *[]string `form:"dashboardTag,omitempty" json:"dashboardTag,omitempty"`
}

// GetAlertsParamsState defines parameters for GetAlerts.
type GetAlertsParamsState string

// GetDashboardStatesParams defines parameters for GetDashboardStates.
type GetDashboardStatesParams struct {
	DashboardId int64 `form:"dashboardId" json:"dashboardId"`
}

// GetAnnotationsParams defines parameters for GetAnnotations.
type GetAnnotationsParams struct {
	// From Find annotations created after specific epoch datetime in milliseconds.
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To Find annotations created before specific epoch datetime in milliseconds.
	To *int64 `form:"to,omitempty" json:"to,omitempty"`

	// UserId Limit response to annotations created by specific user.
	UserId *int64 `form:"userId,omitempty" json:"userId,omitempty"`

	// AlertId Find annotations for a specified alert.
	AlertId *int64 `form:"alertId,omitempty" json:"alertId,omitempty"`

	// DashboardId Find annotations that are scoped to a specific dashboard
	DashboardId *int64 `form:"dashboardId,omitempty" json:"dashboardId,omitempty"`

	// DashboardUID Find annotations that are scoped to a specific dashboard
	DashboardUID *string `form:"dashboardUID,omitempty" json:"dashboardUID,omitempty"`

	// PanelId Find annotations that are scoped to a specific panel
	PanelId *int64 `form:"panelId,omitempty" json:"panelId,omitempty"`

	// Limit Max limit for results returned.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Tags Use this to filter organization annotations. Organization annotations are annotations from an annotation data source that are not connected specifically to a dashboard or panel. You can filter by multiple tags.
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Type Return alerts or user created annotations
	Type *GetAnnotationsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// MatchAny Match any or all tags
	MatchAny *bool `form:"matchAny,omitempty" json:"matchAny,omitempty"`
}

// GetAnnotationsParamsType defines parameters for GetAnnotations.
type GetAnnotationsParamsType string

// GetAnnotationTagsParams defines parameters for GetAnnotationTags.
type GetAnnotationTagsParams struct {
	// Tag Tag is a string that you can use to filter tags.
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Limit Max limit for results returned.
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// RoutePostAlertRuleParams defines parameters for RoutePostAlertRule.
type RoutePostAlertRuleParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RouteGetAlertRulesExportParams defines parameters for RouteGetAlertRulesExport.
type RouteGetAlertRulesExportParams struct {
	// Download Whether to initiate a download of the file or not.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Format Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// FolderUid UIDs of folders from which to export rules
	FolderUid *[]string `form:"folderUid,omitempty" json:"folderUid,omitempty"`

	// Group Name of group of rules to export. Must be specified only together with a single folder UID
	Group *string `form:"group,omitempty" json:"group,omitempty"`

	// RuleUid UID of alert rule to export. If specified, parameters folderUid and group must be empty.
	RuleUid *string `form:"ruleUid,omitempty" json:"ruleUid,omitempty"`
}

// RouteDeleteAlertRuleParams defines parameters for RouteDeleteAlertRule.
type RouteDeleteAlertRuleParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RoutePutAlertRuleParams defines parameters for RoutePutAlertRule.
type RoutePutAlertRuleParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RouteGetAlertRuleExportParams defines parameters for RouteGetAlertRuleExport.
type RouteGetAlertRuleExportParams struct {
	// Download Whether to initiate a download of the file or not.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Format Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// RouteGetContactpointsParams defines parameters for RouteGetContactpoints.
type RouteGetContactpointsParams struct {
	// Name Filter by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// RoutePostContactpointsParams defines parameters for RoutePostContactpoints.
type RoutePostContactpointsParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RouteGetContactpointsExportParams defines parameters for RouteGetContactpointsExport.
type RouteGetContactpointsExportParams struct {
	// Download Whether to initiate a download of the file or not.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Format Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.
	Format *string `form:"format,omitempty" json:"format,omitempty"`

	// Decrypt Whether any contained secure settings should be decrypted or left redacted. Redacted settings will contain RedactedValue instead. Currently, only org admin can view decrypted secure settings.
	Decrypt *bool `form:"decrypt,omitempty" json:"decrypt,omitempty"`

	// Name Filter by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// RoutePutContactpointParams defines parameters for RoutePutContactpoint.
type RoutePutContactpointParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RoutePutAlertRuleGroupParams defines parameters for RoutePutAlertRuleGroup.
type RoutePutAlertRuleGroupParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RouteGetAlertRuleGroupExportParams defines parameters for RouteGetAlertRuleGroupExport.
type RouteGetAlertRuleGroupExportParams struct {
	// Download Whether to initiate a download of the file or not.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Format Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// RoutePostMuteTimingParams defines parameters for RoutePostMuteTiming.
type RoutePostMuteTimingParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RouteExportMuteTimingsParams defines parameters for RouteExportMuteTimings.
type RouteExportMuteTimingsParams struct {
	// Download Whether to initiate a download of the file or not.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Format Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// RoutePutMuteTimingParams defines parameters for RoutePutMuteTiming.
type RoutePutMuteTimingParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RouteExportMuteTimingParams defines parameters for RouteExportMuteTiming.
type RouteExportMuteTimingParams struct {
	// Download Whether to initiate a download of the file or not.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Format Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// RoutePutPolicyTreeParams defines parameters for RoutePutPolicyTree.
type RoutePutPolicyTreeParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// RoutePutTemplateParams defines parameters for RoutePutTemplate.
type RoutePutTemplateParams struct {
	XDisableProvenance *string `json:"X-Disable-Provenance,omitempty"`
}

// GetAPIkeysParams defines parameters for GetAPIkeys.
type GetAPIkeysParams struct {
	// IncludeExpired Show expired keys
	IncludeExpired *bool `form:"includeExpired,omitempty" json:"includeExpired,omitempty"`
}

// SearchDashboardSnapshotsParams defines parameters for SearchDashboardSnapshots.
type SearchDashboardSnapshotsParams struct {
	// Query Search Query
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Limit Limit the number of returned results
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CalculateDashboardDiffJSONBody defines parameters for CalculateDashboardDiff.
type CalculateDashboardDiffJSONBody struct {
	Base *CalculateDiffTarget `json:"base,omitempty"`

	// DiffType The type of diff to return
	// Description:
	// `basic`
	// `json`
	DiffType *CalculateDashboardDiffJSONBodyDiffType `json:"diffType,omitempty"`
	New      *CalculateDiffTarget                    `json:"new,omitempty"`
}

// CalculateDashboardDiffJSONBodyDiffType defines parameters for CalculateDashboardDiff.
type CalculateDashboardDiffJSONBodyDiffType string

// GetDashboardVersionsByUIDParams defines parameters for GetDashboardVersionsByUID.
type GetDashboardVersionsByUIDParams struct {
	// Limit Maximum number of results to return
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Start Version to start from when returning queries
	Start *int64 `form:"start,omitempty" json:"start,omitempty"`
}

// GetCorrelationsParams defines parameters for GetCorrelations.
type GetCorrelationsParams struct {
	// Limit Limit the maximum number of correlations to return per page
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page index for starting fetching correlations
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// SourceUID Source datasource UID filter to be applied to correlations
	SourceUID *[]string `form:"sourceUID,omitempty" json:"sourceUID,omitempty"`
}

// DatasourceProxyPOSTByUIDcallsJSONBody defines parameters for DatasourceProxyPOSTByUIDcalls.
type DatasourceProxyPOSTByUIDcallsJSONBody = interface{}

// DatasourceProxyPOSTcallsJSONBody defines parameters for DatasourceProxyPOSTcalls.
type DatasourceProxyPOSTcallsJSONBody = interface{}

// GetFoldersParams defines parameters for GetFolders.
type GetFoldersParams struct {
	// Limit Limit the maximum number of folders to return
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page index for starting fetching folders
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// ParentUid The parent folder UID
	ParentUid *string `form:"parentUid,omitempty" json:"parentUid,omitempty"`
}

// DeleteFolderParams defines parameters for DeleteFolder.
type DeleteFolderParams struct {
	// ForceDeleteRules If `true` any Grafana 8 Alerts under this folder will be deleted.
	// Set to `false` so that the request will fail if the folder contains any Grafana 8 Alerts.
	ForceDeleteRules *bool `form:"forceDeleteRules,omitempty" json:"forceDeleteRules,omitempty"`
}

// GetLibraryElementsParams defines parameters for GetLibraryElements.
type GetLibraryElementsParams struct {
	// SearchString Part of the name or description searched for.
	SearchString *string `form:"searchString,omitempty" json:"searchString,omitempty"`

	// Kind Kind of element to search for.
	Kind *GetLibraryElementsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// SortDirection Sort order of elements.
	SortDirection *GetLibraryElementsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`

	// TypeFilter A comma separated list of types to filter the elements by
	TypeFilter *string `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ExcludeUid Element UID to exclude from search results.
	ExcludeUid *string `form:"excludeUid,omitempty" json:"excludeUid,omitempty"`

	// FolderFilter A comma separated list of folder ID(s) to filter the elements by.
	FolderFilter *string `form:"folderFilter,omitempty" json:"folderFilter,omitempty"`

	// PerPage The number of results per page.
	PerPage *int64 `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Page The page for a set of records, given that only perPage records are returned at a time. Numbering starts at 1.
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`
}

// GetLibraryElementsParamsKind defines parameters for GetLibraryElements.
type GetLibraryElementsParamsKind int64

// GetLibraryElementsParamsSortDirection defines parameters for GetLibraryElements.
type GetLibraryElementsParamsSortDirection string

// PostRenewLicenseTokenJSONBody defines parameters for PostRenewLicenseToken.
type PostRenewLicenseTokenJSONBody = map[string]interface{}

// GetOrgUsersForCurrentOrgLookupParams defines parameters for GetOrgUsersForCurrentOrgLookup.
type GetOrgUsersForCurrentOrgLookupParams struct {
	Query *string `form:"query,omitempty" json:"query,omitempty"`
	Limit *int64  `form:"limit,omitempty" json:"limit,omitempty"`
}

// SearchOrgsParams defines parameters for SearchOrgs.
type SearchOrgsParams struct {
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// Perpage Number of items per page
	// The totalCount field in the response can be used for pagination list E.g. if totalCount is equal to 100 teams and the perpage parameter is set to 10 then there are 10 pages of teams.
	Perpage *int64  `form:"perpage,omitempty" json:"perpage,omitempty"`
	Name    *string `form:"name,omitempty" json:"name,omitempty"`

	// Query If set it will return results where the query value is contained in the name field. Query values with spaces need to be URL encoded.
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// SearchPlaylistsParams defines parameters for SearchPlaylists.
type SearchPlaylistsParams struct {
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Limit in:limit
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// SearchQueriesParams defines parameters for SearchQueries.
type SearchQueriesParams struct {
	// DatasourceUid List of data source UIDs to search for
	DatasourceUid *[]string `form:"datasourceUid,omitempty" json:"datasourceUid,omitempty"`

	// SearchString Text inside query or comments that is searched for
	SearchString *string `form:"searchString,omitempty" json:"searchString,omitempty"`

	// OnlyStarred Flag indicating if only starred queries should be returned
	OnlyStarred *bool `form:"onlyStarred,omitempty" json:"onlyStarred,omitempty"`

	// Sort Sort method
	Sort *SearchQueriesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size.
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// Limit Limit the number of returned results
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// From From range for the query history search
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To To range for the query history search
	To *int64 `form:"to,omitempty" json:"to,omitempty"`
}

// SearchQueriesParamsSort defines parameters for SearchQueries.
type SearchQueriesParamsSort string

// RenderReportPDFsParams defines parameters for RenderReportPDFs.
type RenderReportPDFsParams struct {
	DashboardID   *string `form:"dashboardID,omitempty" json:"dashboardID,omitempty"`
	Orientation   *string `form:"orientation,omitempty" json:"orientation,omitempty"`
	Layout        *string `form:"layout,omitempty" json:"layout,omitempty"`
	Title         *string `form:"title,omitempty" json:"title,omitempty"`
	ScaleFactor   *string `form:"scaleFactor,omitempty" json:"scaleFactor,omitempty"`
	IncludeTables *string `form:"includeTables,omitempty" json:"includeTables,omitempty"`
}

// PostACSParams defines parameters for PostACS.
type PostACSParams struct {
	RelayState *string `form:"RelayState,omitempty" json:"RelayState,omitempty"`
}

// PostSLOParams defines parameters for PostSLO.
type PostSLOParams struct {
	SAMLRequest  *string `form:"SAMLRequest,omitempty" json:"SAMLRequest,omitempty"`
	SAMLResponse *string `form:"SAMLResponse,omitempty" json:"SAMLResponse,omitempty"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	// Query Search Query
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Tag List of tags to search for
	Tag *[]string `form:"tag,omitempty" json:"tag,omitempty"`

	// Type Type to search for, dash-folder or dash-db
	Type *SearchParamsType `form:"type,omitempty" json:"type,omitempty"`

	// DashboardIds List of dashboard id’s to search for
	// This is deprecated: users should use the `dashboardUIDs` query parameter instead
	DashboardIds *[]int64 `form:"dashboardIds,omitempty" json:"dashboardIds,omitempty"`

	// DashboardUIDs List of dashboard uid’s to search for
	DashboardUIDs *[]string `form:"dashboardUIDs,omitempty" json:"dashboardUIDs,omitempty"`

	// FolderIds List of folder id’s to search in for dashboards
	// If it's `0` then it will query for the top level folders
	// This is deprecated: users should use the `folderUIDs` query parameter instead
	FolderIds *[]int64 `form:"folderIds,omitempty" json:"folderIds,omitempty"`

	// FolderUIDs List of folder UID’s to search in for dashboards
	// If it's an empty string then it will query for the top level folders
	FolderUIDs *[]string `form:"folderUIDs,omitempty" json:"folderUIDs,omitempty"`

	// Starred Flag indicating if only starred Dashboards should be returned
	Starred *bool `form:"starred,omitempty" json:"starred,omitempty"`

	// Limit Limit the number of returned results (max 5000)
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// Permission Set to `Edit` to return dashboards/folders that the user can edit
	Permission *SearchParamsPermission `form:"permission,omitempty" json:"permission,omitempty"`

	// Sort Sort method; for listing all the possible sort methods use the search sorting endpoint.
	Sort *SearchParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// SearchParamsType defines parameters for Search.
type SearchParamsType string

// SearchParamsPermission defines parameters for Search.
type SearchParamsPermission string

// SearchParamsSort defines parameters for Search.
type SearchParamsSort string

// SearchOrgServiceAccountsWithPagingParams defines parameters for SearchOrgServiceAccountsWithPaging.
type SearchOrgServiceAccountsWithPagingParams struct {
	Disabled      *bool `form:"Disabled,omitempty" json:"Disabled,omitempty"`
	ExpiredTokens *bool `form:"expiredTokens,omitempty" json:"expiredTokens,omitempty"`

	// Query It will return results where the query value is contained in one of the name.
	// Query values with spaces need to be URL encoded.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Perpage The default value is 1000.
	Perpage *int64 `form:"perpage,omitempty" json:"perpage,omitempty"`

	// Page The default value is 1.
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`
}

// SearchTeamsParams defines parameters for SearchTeams.
type SearchTeamsParams struct {
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// Perpage Number of items per page
	// The totalCount field in the response can be used for pagination list E.g. if totalCount is equal to 100 teams and the perpage parameter is set to 10 then there are 10 pages of teams.
	Perpage *int64  `form:"perpage,omitempty" json:"perpage,omitempty"`
	Name    *string `form:"name,omitempty" json:"name,omitempty"`

	// Query If set it will return results where the query value is contained in the name field. Query values with spaces need to be URL encoded.
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// RemoveTeamGroupApiQueryParams defines parameters for RemoveTeamGroupApiQuery.
type RemoveTeamGroupApiQueryParams struct {
	GroupId *string `form:"groupId,omitempty" json:"groupId,omitempty"`
}

// SearchUsersParams defines parameters for SearchUsers.
type SearchUsersParams struct {
	// Perpage Limit the maximum number of users to return per page
	Perpage *int64 `form:"perpage,omitempty" json:"perpage,omitempty"`

	// Page Page index for starting fetching users
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserByLoginOrEmailParams defines parameters for GetUserByLoginOrEmail.
type GetUserByLoginOrEmailParams struct {
	// LoginOrEmail loginOrEmail of the user
	LoginOrEmail string `form:"loginOrEmail" json:"loginOrEmail"`
}

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleForm

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleCommand

// SetRoleAssignmentsJSONRequestBody defines body for SetRoleAssignments for application/json ContentType.
type SetRoleAssignmentsJSONRequestBody = SetRoleAssignmentsCommand

// ListTeamsRolesJSONRequestBody defines body for ListTeamsRoles for application/json ContentType.
type ListTeamsRolesJSONRequestBody = RolesSearchQuery

// AddTeamRoleJSONRequestBody defines body for AddTeamRole for application/json ContentType.
type AddTeamRoleJSONRequestBody = AddTeamRoleCommand

// ListUsersRolesJSONRequestBody defines body for ListUsersRoles for application/json ContentType.
type ListUsersRolesJSONRequestBody = RolesSearchQuery

// AddUserRoleJSONRequestBody defines body for AddUserRole for application/json ContentType.
type AddUserRoleJSONRequestBody = AddUserRoleCommand

// SetUserRolesJSONRequestBody defines body for SetUserRoles for application/json ContentType.
type SetUserRolesJSONRequestBody = SetUserRolesCommand

// SetResourcePermissionsJSONRequestBody defines body for SetResourcePermissions for application/json ContentType.
type SetResourcePermissionsJSONRequestBody = SetPermissionsCommand

// SetResourcePermissionsForBuiltInRoleJSONRequestBody defines body for SetResourcePermissionsForBuiltInRole for application/json ContentType.
type SetResourcePermissionsForBuiltInRoleJSONRequestBody = SetPermissionCommand

// SetResourcePermissionsForTeamJSONRequestBody defines body for SetResourcePermissionsForTeam for application/json ContentType.
type SetResourcePermissionsForTeamJSONRequestBody = SetPermissionCommand

// SetResourcePermissionsForUserJSONRequestBody defines body for SetResourcePermissionsForUser for application/json ContentType.
type SetResourcePermissionsForUserJSONRequestBody = SetPermissionCommand

// PauseAllAlertsJSONRequestBody defines body for PauseAllAlerts for application/json ContentType.
type PauseAllAlertsJSONRequestBody = PauseAllAlertsCommand

// AdminCreateUserJSONRequestBody defines body for AdminCreateUser for application/json ContentType.
type AdminCreateUserJSONRequestBody = AdminCreateUserForm

// AdminUpdateUserPasswordJSONRequestBody defines body for AdminUpdateUserPassword for application/json ContentType.
type AdminUpdateUserPasswordJSONRequestBody = AdminUpdateUserPasswordForm

// AdminUpdateUserPermissionsJSONRequestBody defines body for AdminUpdateUserPermissions for application/json ContentType.
type AdminUpdateUserPermissionsJSONRequestBody = AdminUpdateUserPermissionsForm

// UpdateUserQuotaJSONRequestBody defines body for UpdateUserQuota for application/json ContentType.
type UpdateUserQuotaJSONRequestBody = UpdateQuotaCmd

// AdminRevokeUserAuthTokenJSONRequestBody defines body for AdminRevokeUserAuthToken for application/json ContentType.
type AdminRevokeUserAuthTokenJSONRequestBody = RevokeAuthTokenCmd

// CreateAlertNotificationChannelJSONRequestBody defines body for CreateAlertNotificationChannel for application/json ContentType.
type CreateAlertNotificationChannelJSONRequestBody = CreateAlertNotificationCommand

// NotificationChannelTestJSONRequestBody defines body for NotificationChannelTest for application/json ContentType.
type NotificationChannelTestJSONRequestBody = NotificationTestCommand

// UpdateAlertNotificationChannelByUIDJSONRequestBody defines body for UpdateAlertNotificationChannelByUID for application/json ContentType.
type UpdateAlertNotificationChannelByUIDJSONRequestBody = UpdateAlertNotificationWithUidCommand

// UpdateAlertNotificationChannelJSONRequestBody defines body for UpdateAlertNotificationChannel for application/json ContentType.
type UpdateAlertNotificationChannelJSONRequestBody = UpdateAlertNotificationCommand

// TestAlertJSONRequestBody defines body for TestAlert for application/json ContentType.
type TestAlertJSONRequestBody = AlertTestCommand

// PauseAlertJSONRequestBody defines body for PauseAlert for application/json ContentType.
type PauseAlertJSONRequestBody = PauseAlertCommand

// PostAnnotationJSONRequestBody defines body for PostAnnotation for application/json ContentType.
type PostAnnotationJSONRequestBody = PostAnnotationsCmd

// PostGraphiteAnnotationJSONRequestBody defines body for PostGraphiteAnnotation for application/json ContentType.
type PostGraphiteAnnotationJSONRequestBody = PostGraphiteAnnotationsCmd

// MassDeleteAnnotationsJSONRequestBody defines body for MassDeleteAnnotations for application/json ContentType.
type MassDeleteAnnotationsJSONRequestBody = MassDeleteAnnotationsCmd

// PatchAnnotationJSONRequestBody defines body for PatchAnnotation for application/json ContentType.
type PatchAnnotationJSONRequestBody = PatchAnnotationsCmd

// UpdateAnnotationJSONRequestBody defines body for UpdateAnnotation for application/json ContentType.
type UpdateAnnotationJSONRequestBody = UpdateAnnotationsCmd

// RoutePostAlertRuleJSONRequestBody defines body for RoutePostAlertRule for application/json ContentType.
type RoutePostAlertRuleJSONRequestBody = ProvisionedAlertRule

// RoutePutAlertRuleJSONRequestBody defines body for RoutePutAlertRule for application/json ContentType.
type RoutePutAlertRuleJSONRequestBody = ProvisionedAlertRule

// RoutePostContactpointsJSONRequestBody defines body for RoutePostContactpoints for application/json ContentType.
type RoutePostContactpointsJSONRequestBody = EmbeddedContactPoint

// RoutePutContactpointJSONRequestBody defines body for RoutePutContactpoint for application/json ContentType.
type RoutePutContactpointJSONRequestBody = EmbeddedContactPoint

// RoutePutAlertRuleGroupJSONRequestBody defines body for RoutePutAlertRuleGroup for application/json ContentType.
type RoutePutAlertRuleGroupJSONRequestBody = AlertRuleGroup

// RoutePostMuteTimingJSONRequestBody defines body for RoutePostMuteTiming for application/json ContentType.
type RoutePostMuteTimingJSONRequestBody = MuteTimeInterval

// RoutePutMuteTimingJSONRequestBody defines body for RoutePutMuteTiming for application/json ContentType.
type RoutePutMuteTimingJSONRequestBody = MuteTimeInterval

// RoutePutPolicyTreeJSONRequestBody defines body for RoutePutPolicyTree for application/json ContentType.
type RoutePutPolicyTreeJSONRequestBody = Route

// RoutePutTemplateJSONRequestBody defines body for RoutePutTemplate for application/json ContentType.
type RoutePutTemplateJSONRequestBody = NotificationTemplateContent

// AddAPIkeyJSONRequestBody defines body for AddAPIkey for application/json ContentType.
type AddAPIkeyJSONRequestBody = AddAPIKeyCommand

// CalculateDashboardDiffJSONRequestBody defines body for CalculateDashboardDiff for application/json ContentType.
type CalculateDashboardDiffJSONRequestBody CalculateDashboardDiffJSONBody

// PostDashboardJSONRequestBody defines body for PostDashboard for application/json ContentType.
type PostDashboardJSONRequestBody = SaveDashboardCommand

// UpdateDashboardPermissionsByIDJSONRequestBody defines body for UpdateDashboardPermissionsByID for application/json ContentType.
type UpdateDashboardPermissionsByIDJSONRequestBody = UpdateDashboardACLCommand

// RestoreDashboardVersionByIDJSONRequestBody defines body for RestoreDashboardVersionByID for application/json ContentType.
type RestoreDashboardVersionByIDJSONRequestBody = RestoreDashboardVersionCommand

// ImportDashboardJSONRequestBody defines body for ImportDashboard for application/json ContentType.
type ImportDashboardJSONRequestBody = ImportDashboardRequest

// CreatePublicDashboardJSONRequestBody defines body for CreatePublicDashboard for application/json ContentType.
type CreatePublicDashboardJSONRequestBody = PublicDashboardDTO

// UpdatePublicDashboardJSONRequestBody defines body for UpdatePublicDashboard for application/json ContentType.
type UpdatePublicDashboardJSONRequestBody = PublicDashboardDTO

// UpdateDashboardPermissionsByUIDJSONRequestBody defines body for UpdateDashboardPermissionsByUID for application/json ContentType.
type UpdateDashboardPermissionsByUIDJSONRequestBody = UpdateDashboardACLCommand

// RestoreDashboardVersionByUIDJSONRequestBody defines body for RestoreDashboardVersionByUID for application/json ContentType.
type RestoreDashboardVersionByUIDJSONRequestBody = RestoreDashboardVersionCommand

// AddDataSourceJSONRequestBody defines body for AddDataSource for application/json ContentType.
type AddDataSourceJSONRequestBody = AddDataSourceCommand

// DatasourceProxyPOSTByUIDcallsJSONRequestBody defines body for DatasourceProxyPOSTByUIDcalls for application/json ContentType.
type DatasourceProxyPOSTByUIDcallsJSONRequestBody = DatasourceProxyPOSTByUIDcallsJSONBody

// DatasourceProxyPOSTcallsJSONRequestBody defines body for DatasourceProxyPOSTcalls for application/json ContentType.
type DatasourceProxyPOSTcallsJSONRequestBody = DatasourceProxyPOSTcallsJSONBody

// CreateCorrelationJSONRequestBody defines body for CreateCorrelation for application/json ContentType.
type CreateCorrelationJSONRequestBody = CreateCorrelationCommand

// UpdateCorrelationJSONRequestBody defines body for UpdateCorrelation for application/json ContentType.
type UpdateCorrelationJSONRequestBody = UpdateCorrelationCommand

// UpdateDataSourceByUIDJSONRequestBody defines body for UpdateDataSourceByUID for application/json ContentType.
type UpdateDataSourceByUIDJSONRequestBody = UpdateDataSourceCommand

// UpdateDataSourceByIDJSONRequestBody defines body for UpdateDataSourceByID for application/json ContentType.
type UpdateDataSourceByIDJSONRequestBody = UpdateDataSourceCommand

// QueryMetricsWithExpressionsJSONRequestBody defines body for QueryMetricsWithExpressions for application/json ContentType.
type QueryMetricsWithExpressionsJSONRequestBody = MetricRequest

// CreateFolderJSONRequestBody defines body for CreateFolder for application/json ContentType.
type CreateFolderJSONRequestBody = CreateFolderCommand

// UpdateFolderJSONRequestBody defines body for UpdateFolder for application/json ContentType.
type UpdateFolderJSONRequestBody = UpdateFolderCommand

// MoveFolderJSONRequestBody defines body for MoveFolder for application/json ContentType.
type MoveFolderJSONRequestBody = MoveFolderCommand

// UpdateFolderPermissionsJSONRequestBody defines body for UpdateFolderPermissions for application/json ContentType.
type UpdateFolderPermissionsJSONRequestBody = UpdateDashboardACLCommand

// CreateLibraryElementJSONRequestBody defines body for CreateLibraryElement for application/json ContentType.
type CreateLibraryElementJSONRequestBody = CreateLibraryElementCommand

// UpdateLibraryElementJSONRequestBody defines body for UpdateLibraryElement for application/json ContentType.
type UpdateLibraryElementJSONRequestBody = PatchLibraryElementCommand

// DeleteLicenseTokenJSONRequestBody defines body for DeleteLicenseToken for application/json ContentType.
type DeleteLicenseTokenJSONRequestBody = DeleteTokenCommand

// PostLicenseTokenJSONRequestBody defines body for PostLicenseToken for application/json ContentType.
type PostLicenseTokenJSONRequestBody = DeleteTokenCommand

// PostRenewLicenseTokenJSONRequestBody defines body for PostRenewLicenseToken for application/json ContentType.
type PostRenewLicenseTokenJSONRequestBody = PostRenewLicenseTokenJSONBody

// UpdateCurrentOrgJSONRequestBody defines body for UpdateCurrentOrg for application/json ContentType.
type UpdateCurrentOrgJSONRequestBody = UpdateOrgForm

// UpdateCurrentOrgAddressJSONRequestBody defines body for UpdateCurrentOrgAddress for application/json ContentType.
type UpdateCurrentOrgAddressJSONRequestBody = UpdateOrgAddressForm

// AddOrgInviteJSONRequestBody defines body for AddOrgInvite for application/json ContentType.
type AddOrgInviteJSONRequestBody = AddInviteForm

// PatchOrgPreferencesJSONRequestBody defines body for PatchOrgPreferences for application/json ContentType.
type PatchOrgPreferencesJSONRequestBody = PatchPrefsCmd

// UpdateOrgPreferencesJSONRequestBody defines body for UpdateOrgPreferences for application/json ContentType.
type UpdateOrgPreferencesJSONRequestBody = UpdatePrefsCmd

// AddOrgUserToCurrentOrgJSONRequestBody defines body for AddOrgUserToCurrentOrg for application/json ContentType.
type AddOrgUserToCurrentOrgJSONRequestBody = AddOrgUserCommand

// UpdateOrgUserForCurrentOrgJSONRequestBody defines body for UpdateOrgUserForCurrentOrg for application/json ContentType.
type UpdateOrgUserForCurrentOrgJSONRequestBody = UpdateOrgUserCommand

// CreateOrgJSONRequestBody defines body for CreateOrg for application/json ContentType.
type CreateOrgJSONRequestBody = CreateOrgCommand

// UpdateOrgJSONRequestBody defines body for UpdateOrg for application/json ContentType.
type UpdateOrgJSONRequestBody = UpdateOrgForm

// UpdateOrgAddressJSONRequestBody defines body for UpdateOrgAddress for application/json ContentType.
type UpdateOrgAddressJSONRequestBody = UpdateOrgAddressForm

// UpdateOrgQuotaJSONRequestBody defines body for UpdateOrgQuota for application/json ContentType.
type UpdateOrgQuotaJSONRequestBody = UpdateQuotaCmd

// AddOrgUserJSONRequestBody defines body for AddOrgUser for application/json ContentType.
type AddOrgUserJSONRequestBody = AddOrgUserCommand

// UpdateOrgUserJSONRequestBody defines body for UpdateOrgUser for application/json ContentType.
type UpdateOrgUserJSONRequestBody = UpdateOrgUserCommand

// CreatePlaylistJSONRequestBody defines body for CreatePlaylist for application/json ContentType.
type CreatePlaylistJSONRequestBody = CreatePlaylistCommand

// UpdatePlaylistJSONRequestBody defines body for UpdatePlaylist for application/json ContentType.
type UpdatePlaylistJSONRequestBody = UpdatePlaylistCommand

// CreateQueryJSONRequestBody defines body for CreateQuery for application/json ContentType.
type CreateQueryJSONRequestBody = CreateQueryInQueryHistoryCommand

// PatchQueryCommentJSONRequestBody defines body for PatchQueryComment for application/json ContentType.
type PatchQueryCommentJSONRequestBody = PatchQueryCommentInQueryHistoryCommand

// CreateRecordingRuleJSONRequestBody defines body for CreateRecordingRule for application/json ContentType.
type CreateRecordingRuleJSONRequestBody = RecordingRuleJSON

// UpdateRecordingRuleJSONRequestBody defines body for UpdateRecordingRule for application/json ContentType.
type UpdateRecordingRuleJSONRequestBody = RecordingRuleJSON

// TestCreateRecordingRuleJSONRequestBody defines body for TestCreateRecordingRule for application/json ContentType.
type TestCreateRecordingRuleJSONRequestBody = RecordingRuleJSON

// CreateRecordingRuleWriteTargetJSONRequestBody defines body for CreateRecordingRuleWriteTarget for application/json ContentType.
type CreateRecordingRuleWriteTargetJSONRequestBody = PrometheusRemoteWriteTargetJSON

// CreateReportJSONRequestBody defines body for CreateReport for application/json ContentType.
type CreateReportJSONRequestBody = CreateOrUpdateReportConfig

// SendReportJSONRequestBody defines body for SendReport for application/json ContentType.
type SendReportJSONRequestBody = ReportEmail

// SaveReportSettingsJSONRequestBody defines body for SaveReportSettings for application/json ContentType.
type SaveReportSettingsJSONRequestBody = ReportSettings

// SendTestEmailJSONRequestBody defines body for SendTestEmail for application/json ContentType.
type SendTestEmailJSONRequestBody = CreateOrUpdateReportConfig

// UpdateReportJSONRequestBody defines body for UpdateReport for application/json ContentType.
type UpdateReportJSONRequestBody = CreateOrUpdateReportConfig

// CreateServiceAccountJSONRequestBody defines body for CreateServiceAccount for application/json ContentType.
type CreateServiceAccountJSONRequestBody = CreateServiceAccountForm

// UpdateServiceAccountJSONRequestBody defines body for UpdateServiceAccount for application/json ContentType.
type UpdateServiceAccountJSONRequestBody = UpdateServiceAccountForm

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = AddServiceAccountTokenCommand

// CreateDashboardSnapshotJSONRequestBody defines body for CreateDashboardSnapshot for application/json ContentType.
type CreateDashboardSnapshotJSONRequestBody = CreateDashboardSnapshotCommand

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamCommand

// AddTeamGroupApiJSONRequestBody defines body for AddTeamGroupApi for application/json ContentType.
type AddTeamGroupApiJSONRequestBody = TeamGroupMapping

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamCommand

// AddTeamMemberJSONRequestBody defines body for AddTeamMember for application/json ContentType.
type AddTeamMemberJSONRequestBody = AddTeamMemberCommand

// UpdateTeamMemberJSONRequestBody defines body for UpdateTeamMember for application/json ContentType.
type UpdateTeamMemberJSONRequestBody = UpdateTeamMemberCommand

// UpdateTeamPreferencesJSONRequestBody defines body for UpdateTeamPreferences for application/json ContentType.
type UpdateTeamPreferencesJSONRequestBody = UpdatePrefsCmd

// UpdateSignedInUserJSONRequestBody defines body for UpdateSignedInUser for application/json ContentType.
type UpdateSignedInUserJSONRequestBody = UpdateUserCommand

// ChangeUserPasswordJSONRequestBody defines body for ChangeUserPassword for application/json ContentType.
type ChangeUserPasswordJSONRequestBody = ChangeUserPasswordCommand

// PatchUserPreferencesJSONRequestBody defines body for PatchUserPreferences for application/json ContentType.
type PatchUserPreferencesJSONRequestBody = PatchPrefsCmd

// UpdateUserPreferencesJSONRequestBody defines body for UpdateUserPreferences for application/json ContentType.
type UpdateUserPreferencesJSONRequestBody = UpdatePrefsCmd

// RevokeUserAuthTokenJSONRequestBody defines body for RevokeUserAuthToken for application/json ContentType.
type RevokeUserAuthTokenJSONRequestBody = RevokeAuthTokenCmd

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserCommand

// UpdateProviderSettingsJSONRequestBody defines body for UpdateProviderSettings for application/json ContentType.
type UpdateProviderSettingsJSONRequestBody = SSOSettings
